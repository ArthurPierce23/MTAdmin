from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QLineEdit, QPushButton, QTableWidget, QTableWidgetItem, QGroupBox, QHeaderView, QSizePolicy
)
from PySide6.QtCore import Qt
from notifications import Notification


class RecentConnectionsBlock(QWidget):
    def __init__(self, pc_connection_block=None) -> None:
        super().__init__()
        self.pc_connection_block = pc_connection_block
        self.init_ui()
        self.clear_button.clicked.connect(self.clear_connections)
        self.connections_table.itemDoubleClicked.connect(self.on_item_double_clicked)
        self.refresh_table()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    def init_ui(self) -> None:
        main_layout = QVBoxLayout()

        connections_group = QGroupBox("üì° –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        connections_group.setObjectName("groupBox")  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é

        group_layout = QVBoxLayout()
        group_layout.setContentsMargins(10, 10, 10, 10)
        group_layout.setSpacing(8)

        # üîé –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_layout = QHBoxLayout()
        search_label = QLabel("üîç –ü–æ–∏—Å–∫:")
        search_label.setObjectName("searchLabel")

        self.search_input = QLineEdit()
        self.search_input.setObjectName("inputField")
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ IP –∏–ª–∏ –¥–∞—Ç—É")
        self.search_input.textChanged.connect(self.filter_connections)

        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_input)
        group_layout.addLayout(search_layout)

        # üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.connections_table = QTableWidget(0, 2)
        self.connections_table.setObjectName("connectionsTable")
        self.connections_table.setHorizontalHeaderLabels(["üíª IP", "üìÖ –î–∞—Ç–∞"])
        self.connections_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.connections_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        group_layout.addWidget(self.connections_table)

        # ‚ùå –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º layout –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç
        clear_layout = QHBoxLayout()
        clear_layout.addStretch()  # –°–ø–µ–π—Å–µ—Ä –¥–ª—è –ø—Ä–∏–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤–ø—Ä–∞–≤–æ
        self.clear_button = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.clear_button.setObjectName("dangerButton")  # –î–ª—è –∫—Ä–∞—Å–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        self.clear_button.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Fixed)
        self.clear_button.adjustSize()
        clear_layout.addWidget(self.clear_button)
        group_layout.addLayout(clear_layout)

        connections_group.setLayout(group_layout)
        main_layout.addWidget(connections_group)
        self.setLayout(main_layout)

    def filter_connections(self) -> None:
        filter_text = self.search_input.text().lower()
        for row in range(self.connections_table.rowCount()):
            ip_item = self.connections_table.item(row, 0)
            date_item = self.connections_table.item(row, 1)
            ip = ip_item.text().lower() if ip_item else ""
            date = date_item.text().lower() if date_item else ""
            is_visible = filter_text in ip or filter_text in date
            self.connections_table.setRowHidden(row, not is_visible)
        if not any(not self.connections_table.isRowHidden(row) for row in range(self.connections_table.rowCount())):
            Notification(
                "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                "warning",
                duration=2500,
                parent=self
            ).show_notification()

    def clear_connections(self) -> None:
        self.connections_table.setRowCount(0)
        Notification(
            "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—á–∏—â–µ–Ω",
            "–í—Å–µ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.",
            "error",
            duration=3500,
            parent=self
        ).show_notification()

    def add_connection(self, ip: str, date: str, notify: bool = True) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É.
        –ï—Å–ª–∏ notify=False, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è.
        """
        row = self.connections_table.rowCount()
        self.connections_table.insertRow(row)

        ip_item = QTableWidgetItem(ip)
        ip_item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)

        date_item = QTableWidgetItem(date)
        date_item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)

        self.connections_table.setItem(row, 0, ip_item)
        self.connections_table.setItem(row, 1, date_item)

        if notify:
            Notification(
                "–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                f"IP {ip} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π ({date}).",
                "success",
                duration=3500,
                parent=self
            ).show_notification()

    def on_item_double_clicked(self, item: QTableWidgetItem) -> None:
        if self.pc_connection_block is None:
            print("–û—à–∏–±–∫–∞: pc_connection_block is None")
            return

        row = item.row()
        ip_item = self.connections_table.item(row, 0)
        if ip_item:
            ip_text = ip_item.text()
            self.pc_connection_block.ip_input.setText(ip_text)
            Notification(
                "–í—ã–±—Ä–∞–Ω IP",
                f"{ip_text} —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.",
                "info",
                duration=3000,
                parent=self
            ).show_notification()

    def refresh_table(self) -> None:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É.
        –ü—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è.
        """
        from database import db_manager  # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

        records = db_manager.get_all_connections()
        self.connections_table.setRowCount(0)
        for row_data in records:
            ip, date = row_data[1], row_data[3]  # ip –∏ last_connection
            self.add_connection(ip, date, notify=False)

    def moveEvent(self, event) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.
        """
        from notifications import Notification
        for notif in Notification.get_active_notifications():
            notif.update_position()
        super().moveEvent(event)
