from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QLineEdit, QPushButton, QTableWidget, QTableWidgetItem, QGroupBox, QHeaderView, QSizePolicy
)
from PySide6.QtCore import Qt
from notifications import Notification


class RecentConnectionsBlock(QWidget):
    def __init__(self, pc_connection_block=None):
        super().__init__()
        self.pc_connection_block = pc_connection_block
        self._last_filter = None  # –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        self.init_ui()
        self.clear_button.clicked.connect(self.clear_connections)
        self.connections_table.itemDoubleClicked.connect(self.on_item_double_clicked)
        self.refresh_table()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    def init_ui(self):
        main_layout = QVBoxLayout()

        connections_group = QGroupBox("üì° –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        connections_group.setObjectName("groupBox")  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é

        group_layout = QVBoxLayout()
        group_layout.setContentsMargins(10, 10, 10, 10)
        group_layout.setSpacing(8)

        # üîé –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_layout = QHBoxLayout()
        search_label = QLabel("üîç –ü–æ–∏—Å–∫:")
        search_label.setObjectName("searchLabel")

        self.search_input = QLineEdit()
        self.search_input.setObjectName("inputField")  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Ç–∏–ª–∏–∑—É–µ–º
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ IP –∏–ª–∏ –¥–∞—Ç—É")
        self.search_input.textChanged.connect(self.filter_connections)

        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_input)
        group_layout.addLayout(search_layout)

        # üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.connections_table = QTableWidget(0, 2)
        self.connections_table.setObjectName("connectionsTable")
        self.connections_table.setHorizontalHeaderLabels(["üíª IP", "üìÖ –î–∞—Ç–∞"])
        self.connections_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.connections_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        group_layout.addWidget(self.connections_table)

        # ‚ùå –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.clear_button = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.clear_button.setObjectName("dangerButton")  # –ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        self.clear_button.setFixedHeight(36)
        group_layout.addWidget(self.clear_button, alignment=Qt.AlignRight)

        connections_group.setLayout(group_layout)
        main_layout.addWidget(connections_group)

        self.setLayout(main_layout)

    def filter_connections(self):
        filter_text = self.search_input.text().lower()
        found = False
        for row in range(self.connections_table.rowCount()):
            ip = self.connections_table.item(row, 0).text().lower()
            date = self.connections_table.item(row, 1).text().lower()
            is_visible = filter_text in ip or filter_text in date
            self.connections_table.setRowHidden(row, not is_visible)
            if is_visible:
                found = True

        # –£–≤–µ–¥—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã,
        # —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª —Å–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Ç–æ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É,
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–≤–æ–¥–∞ (debounce).
        self._last_filter = filter_text

    def clear_connections(self):
        self.connections_table.setRowCount(0)
        Notification("–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—á–∏—â–µ–Ω", "success", duration=3000, parent=self).show_notification()

    def add_connection(self, ip: str, date: str, notify: bool = True):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É. –ï—Å–ª–∏ notify=False, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è.
        """
        row = self.connections_table.rowCount()
        self.connections_table.insertRow(row)

        ip_item = QTableWidgetItem(ip)
        ip_item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)

        date_item = QTableWidgetItem(date)
        date_item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)

        self.connections_table.setItem(row, 0, ip_item)
        self.connections_table.setItem(row, 1, date_item)

        if notify:
            Notification(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {ip}", "info", duration=3000, parent=self).show_notification()

    def on_item_double_clicked(self, item):
        if self.pc_connection_block is None:
            print("–û—à–∏–±–∫–∞: pc_connection_block is None")
            return

        row = item.row()
        ip_item = self.connections_table.item(row, 0)
        if ip_item:
            ip_text = ip_item.text()
            self.pc_connection_block.ip_input.setText(ip_text)
            Notification(f"–í—ã–±—Ä–∞–Ω IP: {ip_text}", "info", duration=3000, parent=self).show_notification()

    def refresh_table(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É.
        –ü—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è.
        """
        from database import db_manager  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

        records = db_manager.get_all_connections()
        self.connections_table.setRowCount(0)
        for row_data in records:
            ip, date = row_data[1], row_data[3]  # ip –∏ last_connection
            self.add_connection(ip, date, notify=False)

    def moveEvent(self, event):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        from notifications import Notification  # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        for notif in Notification.get_active_notifications():
            notif.update_position()
        super().moveEvent(event)
