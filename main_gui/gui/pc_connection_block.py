from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLineEdit,
    QPushButton, QGroupBox, QSizePolicy, QApplication
)
from PySide6.QtGui import QKeyEvent, QFont
from PySide6.QtCore import Qt, Signal
import socket
from datetime import datetime

from main_gui import utils
from database import db_manager
from notifications import Notification  # –∏ —Ñ—É–Ω–∫—Ü–∏—é set_notifications_enabled, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è


class IPLineEdit(QLineEdit):
    """
    –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ IP-–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ –ü–ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è –ü–ö")
        self.valid = True
        self.textChanged.connect(self.validate_and_highlight)

    def keyPressEvent(self, event: QKeyEvent) -> None:
        key = event.key()
        key_text = event.text()
        cursor_pos = self.cursorPosition()
        text = self.text()
        modifiers = event.modifiers()

        # 1Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à (Ctrl+C, Ctrl+V, Ctrl+X, Ctrl+A)
        if modifiers & Qt.ControlModifier:
            if key in (Qt.Key_C, Qt.Key_V, Qt.Key_X, Qt.Key_A):
                super().keyPressEvent(event)
                return

        # 2Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∞–≤–∏—à–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if key in (Qt.Key_Backspace, Qt.Key_Delete, Qt.Key_Left, Qt.Key_Right, Qt.Key_Home, Qt.Key_End):
            super().keyPressEvent(event)
            return

        # 3Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        is_digit = key_text.isdigit()
        is_dot = key_text == '.'
        is_letter_or_hyphen = key_text.isalnum() or key_text == '-'

        # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–æ–¥–∏—Ç—Å—è –ª–∏ IP-–∞–¥—Ä–µ—Å
        if utils.is_potential_ip(text):
            if not (is_digit or is_dot):  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏
                event.ignore()
                return

            # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –¥–≤–µ —Ç–æ—á–∫–∏ –ø–æ–¥—Ä—è–¥ –∏–ª–∏ —Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–µ
            if is_dot and (cursor_pos == 0 or text[cursor_pos - 1] == '.'):
                event.ignore()
                return

            # –†–∞–∑–±–∏–≤–∞–µ–º IP –Ω–∞ –æ–∫—Ç–µ—Ç—ã
            parts = text.split('.')
            part_index = text[:cursor_pos].count('.')

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –æ–∫—Ç–µ—Ç–∞ –¥–æ 3 —Ü–∏—Ñ—Ä
            if part_index < len(parts) and len(parts[part_index]) >= 3 and is_digit:
                event.ignore()
                return

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ø–æ—Å–ª–µ 3 —Ü–∏—Ñ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–∫—Ç–µ—Ç
            if is_digit and len(parts[part_index]) == 2:
                next_text = text[:cursor_pos] + key_text + text[cursor_pos:]
                new_parts = next_text.split('.')
                if len(new_parts[part_index]) == 3 and part_index < 3:
                    super().keyPressEvent(event)
                    self.insert('.')
                    return

        else:  # 5Ô∏è‚É£ –ï—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—Å—è –∏–º—è –ü–ö
            if not is_letter_or_hyphen:  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å
                event.ignore()
                return

            # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ñ–∏—Å –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –ø–æ–¥—Ä—è–¥
            if key_text == '-' and (cursor_pos == 0 or (cursor_pos < len(text) and text[cursor_pos] == '-')):
                event.ignore()
                return

        # 6Ô∏è‚É£ –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É
        super().keyPressEvent(event)

    def validate_and_highlight(self) -> None:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–µ –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        """
        text = self.text().strip()
        # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–ª–Ω—ã–π IP, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–æ–¥–∞
        if text == "" or (utils.is_partial_ip(text) and not utils.is_valid_ip(text)):
            self.valid = True
        else:
            # –î–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ–º, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º IP –∏–ª–∏ –∏–º–µ–Ω–µ–º –ü–ö
            self.valid = utils.is_valid_ip(text) or utils.is_valid_hostname(text)

        if not self.valid:
            self.setStyleSheet("""
                border: 2px solid #ff4d4d;
                background: #ffe6e6;
                border-radius: 6px;
                color: #b30000;
            """)
        else:
            self.setStyleSheet("")


class PCConnectionBlock(QWidget):
    """
    –ë–ª–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ü–ö. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
    –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã.
    """
    connection_successful = Signal(str, str, str)  # (OS, PC name, IP)

    def __init__(self, recent_connections_block=None, wp_map_block=None, parent=None) -> None:
        super().__init__(parent)
        self.recent_connections_block = recent_connections_block
        self.wp_map_block = wp_map_block  # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–æ–∫ "–ö–∞—Ä—Ç–∞ –†–ú"

        # –Ø–≤–Ω–æ –æ–±—ä—è–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤
        self.ip_input: IPLineEdit | None = None
        self.connect_button: QPushButton | None = None

        self.init_ui()

    def init_ui(self) -> None:
        main_layout = QVBoxLayout()
        connection_group = QGroupBox("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ü–ö")
        connection_group.setObjectName("groupBox")  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏

        group_layout = QHBoxLayout()
        group_layout.setContentsMargins(0, 0, 0, 0)
        group_layout.setSpacing(8)

        self.ip_input = IPLineEdit()
        self.ip_input.setObjectName("inputField")
        self.ip_input.setPlaceholderText("üíª –í–≤–µ–¥–∏—Ç–µ IP –∏–ª–∏ –∏–º—è –ü–ö")
        self.ip_input.setFixedHeight(36)
        # –ù–∞–∂–∞—Ç–∏–µ Enter –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.ip_input.returnPressed.connect(self.connect_to_pc)

        self.connect_button = QPushButton("üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        self.connect_button.setObjectName("actionButton")
        self.connect_button.setMinimumHeight(36)
        self.connect_button.setMinimumWidth(120)
        self.connect_button.setSizePolicy(QSizePolicy.Minimum, QSizePolicy.Fixed)
        self.connect_button.setFont(QFont("Arial", 11, QFont.Bold))
        self.connect_button.setToolTip("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ü–ö")
        self.connect_button.clicked.connect(self.connect_to_pc)

        group_layout.addWidget(self.ip_input)
        group_layout.addWidget(self.connect_button, alignment=Qt.AlignVCenter)

        connection_group.setLayout(group_layout)
        main_layout.addWidget(connection_group)
        self.setLayout(main_layout)

    def connect_to_pc(self) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ü–ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ.
        """
        if self.connect_button is None or self.ip_input is None:
            return  # –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

        self.connect_button.setEnabled(False)
        input_text = self.ip_input.text().strip()
        parent_window = self.window()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
        if not input_text:
            Notification(
                "üîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å",
                "–ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è –ü–ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
                "warning",
                duration=3000,
                parent=parent_window
            ).show_notification()

            self.connect_button.setEnabled(True)
            return

        # –†–∞–∑–ª–∏—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ü–ö.
        if utils.is_valid_ip(input_text):
            ip_address = input_text
        elif utils.is_valid_hostname(input_text):
            try:
                ip_address = socket.gethostbyname(input_text)
            except socket.gaierror:
                Notification(
                    "üåç –û—à–∏–±–∫–∞ DNS",
                    "–°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP-–∞–¥—Ä–µ—Å –ø–æ –∏–º–µ–Ω–∏ –ü–ö.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏.",
                    "error",
                    duration=3500,
                    parent=parent_window
                ).show_notification()

                self.connect_button.setEnabled(True)
                return
        else:
            # –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–º IP –∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º –ü–ö ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ–ø–æ–ª–Ω—ã–π –≤–≤–æ–¥.
            Notification(
                "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è –ü–ö —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.",
                "error",
                duration=3500,
                parent=parent_window
            ).show_notification()

            self.connect_button.setEnabled(True)
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        QApplication.setOverrideCursor(Qt.WaitCursor)
        try:
            reachable, _ = utils.ping_ip(ip_address)
            if not reachable:
                Notification(
                    "üö´ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞",
                    "–£–¥–∞–ª—ë–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏.",
                    "error",
                    duration=4000,
                    parent=parent_window
                ).show_notification()

                return

            now = datetime.now()
            current_time_str = now.strftime("%Y-%m-%d %H:%M:%S")
            # –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –û–° –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            os_name = utils.detect_os(ip_address) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            if self.recent_connections_block:
                self.recent_connections_block.add_connection(ip_address, current_time_str)

            db_manager.add_connection(ip_address, os_name, now)

            if self.wp_map_block:
                print("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É '–ö–∞—Ä—Ç–∞ –†–ú' –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                self.wp_map_block.refresh_table()

            Notification(
                "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ `{ip_address}`.\n–û–°: `{os_name}`",
                "success",
                duration=3500,
                parent=parent_window
            ).show_notification()

            pc_name = utils.get_pc_name(ip_address) or input_text
            self.connection_successful.emit(os_name, pc_name, ip_address)
        finally:
            QApplication.restoreOverrideCursor()
            self.connect_button.setEnabled(True)
