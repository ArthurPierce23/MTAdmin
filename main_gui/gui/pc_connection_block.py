from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QGroupBox, QSizePolicy
from PySide6.QtGui import QKeyEvent, QFont
from PySide6.QtCore import Qt, Signal
import socket
from datetime import datetime

from main_gui import utils
from database import db_manager
from notifications import Notification  # –∏ —Ñ—É–Ω–∫—Ü–∏—è set_notifications_enabled, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è

class IPLineEdit(QLineEdit):
    """
    –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ IP-–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ –ü–ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è –ü–ö")
        self.valid = True
        self.textChanged.connect(self.validate_and_highlight)

    def keyPressEvent(self, event: QKeyEvent):
        key = event.key()
        key_text = event.text()
        cursor_pos = self.cursorPosition()
        text = self.text()

        # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        is_digit = key_text.isdigit()
        is_dot = key_text == '.'
        is_letter_or_hyphen = key_text.isalnum() or key_text == '-'

        # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∞–≤–∏—à–∏ —É–¥–∞–ª–µ–Ω–∏—è
        if key in (Qt.Key_Backspace, Qt.Key_Delete):
            super().keyPressEvent(event)
            return

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å IP-–∞–¥—Ä–µ—Å–æ–º, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏
        if utils.is_potential_ip(text):
            if not (is_digit or is_dot):
                event.ignore()
                return

            # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏
            if is_dot and (cursor_pos == 0 or text[cursor_pos - 1] == '.'):
                event.ignore()
                return

            parts = text.split('.')
            part_index = text[:cursor_pos].count('.')
            if part_index < len(parts) and len(parts[part_index]) >= 3 and is_digit:
                event.ignore()
                return

            # –ï—Å–ª–∏ –≤ —á–∞—Å—Ç–∏ —É–∂–µ 2 —Ü–∏—Ñ—Ä—ã ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ 3-–π —Ü–∏—Ñ—Ä—ã (–¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –≤–≤–æ–¥–∞)
            if is_digit and len(parts[part_index]) == 2:
                next_text = text[:cursor_pos] + key_text + text[cursor_pos:]
                new_parts = next_text.split('.')
                if len(new_parts[part_index]) == 3 and part_index < 3:
                    super().keyPressEvent(event)
                    self.insert('.')
                    return

        else:
            # –ï—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—Å—è –∏–º—è –ü–ö ‚Äì —Ä–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å
            if not is_letter_or_hyphen:
                event.ignore()
                return

            if key_text == '-' and (cursor_pos == 0 or (cursor_pos < len(text) and text[cursor_pos] == '-')):
                event.ignore()
                return

        super().keyPressEvent(event)

    def validate_and_highlight(self):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–µ –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        """
        text = self.text().strip()
        if text == "" or utils.is_partial_ip(text):
            self.valid = True
        elif not utils.is_valid_ip(text):  # –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IP
            self.valid = False
        else:
            self.valid = utils.is_valid_input(text)

        if not self.valid:
            # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, –∑–∞–¥–∞—ë–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É –∏ —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
            self.setStyleSheet(
                "border: 2px solid #ff5555; background: #ffefef; border-radius: 6px;"
            )
        else:
            # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
            self.setStyleSheet("")

class PCConnectionBlock(QWidget):
    """
    –ë–ª–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ü–ö. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
    –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã.
    """
    connection_successful = Signal(str, str, str)  # (OS, PC name, IP)

    def __init__(self, recent_connections_block=None, wp_map_block=None, parent=None):
        super().__init__(parent)
        self.recent_connections_block = recent_connections_block
        self.wp_map_block = wp_map_block  # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–æ–∫ "–ö–∞—Ä—Ç–∞ –†–ú"
        self.init_ui()

    def init_ui(self):
        main_layout = QVBoxLayout()
        connection_group = QGroupBox("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ü–ö")
        connection_group.setObjectName("groupBox")  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏

        group_layout = QHBoxLayout()
        group_layout.setContentsMargins(0, 0, 0, 0)
        group_layout.setSpacing(8)

        self.ip_input = IPLineEdit()
        self.ip_input.setObjectName("inputField")
        self.ip_input.setPlaceholderText("üíª –í–≤–µ–¥–∏—Ç–µ IP –∏–ª–∏ –∏–º—è –ü–ö")
        self.ip_input.setFixedHeight(36)

        self.connect_button = QPushButton("üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        self.connect_button.setObjectName("actionButton")
        self.connect_button.setFixedSize(150, 36)
        self.connect_button.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.connect_button.setFont(QFont("Arial", 11, QFont.Bold))
        self.connect_button.clicked.connect(self.connect_to_pc)

        group_layout.addWidget(self.ip_input)
        group_layout.addWidget(self.connect_button, alignment=Qt.AlignVCenter)

        connection_group.setLayout(group_layout)
        main_layout.addWidget(connection_group)
        self.setLayout(main_layout)

    def connect_to_pc(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ü–ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ."""
        self.connect_button.setEnabled(False)
        input_text = self.ip_input.text().strip()

        if not utils.is_valid_input(input_text):
            Notification("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                         "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è –ü–ö.",
                         "error",
                         duration=3000,
                         parent=self.window()).show_notification()
            self.connect_button.setEnabled(True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–º
        is_ip = utils.is_valid_ip(input_text)
        ip_address = input_text if is_ip else None

        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ü–ö, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ IP-–∞–¥—Ä–µ—Å
        if not is_ip:
            try:
                ip_address = socket.gethostbyname(input_text)
            except socket.gaierror:
                Notification("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                             "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–º—è –ü–ö.",
                             "error",
                             duration=3000,
                             parent=self.window()).show_notification()
                self.connect_button.setEnabled(True)
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø–∏–Ω–≥)
        reachable, _ = utils.ping_ip(ip_address)
        if not reachable:
            Notification("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                         "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.",
                         "error",
                         duration=3000,
                         parent=self.window()).show_notification()
            self.connect_button.setEnabled(True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        os_name = utils.detect_os(ip_address) if is_ip else "Windows"
        current_time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        if self.recent_connections_block:
            self.recent_connections_block.add_connection(ip_address, current_time_str)

        db_manager.add_connection(ip_address, os_name, datetime.now())

        if self.wp_map_block:
            print("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É '–ö–∞—Ä—Ç–∞ –†–ú' –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            self.wp_map_block.refresh_table()

        Notification("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ",
                     f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {ip_address} ({os_name}) —É—Å–ø–µ—à–Ω–æ!",
                     "success",
                     duration=3000,
                     parent=self.window()).show_notification()

        if os_name == "Windows" or not is_ip:
            pc_name = utils.get_pc_name(ip_address) if is_ip else input_text
            self.connection_successful.emit("Windows", pc_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", ip_address)
        elif os_name == "Linux/Unix":
            self.connection_successful.emit("Linux", "", ip_address)
        else:
            Notification("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                         "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.",
                         "error",
                         duration=3000,
                         parent=self.window()).show_notification()

        self.connect_button.setEnabled(True)
