# tab_widgets.py
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QTabWidget, QMenu, QMainWindow, QMessageBox, QInputDialog
)
from PySide6.QtCore import Qt
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PCConnectionBlock
from main_gui.gui.pc_connection_block import PCConnectionBlock
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∏–¥–∂–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, RecentConnectionsBlock, WPMapBlock)
from main_gui.gui.recent_connections_block import RecentConnectionsBlock
from main_gui.gui.wp_map_block import WPMapBlock
# –ò–º–ø–æ—Ä—Ç –æ–∫–æ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
from windows_gui.gui.windows_window import WindowsWindow
from linux_gui.gui.linux_window import LinuxWindow
from main_gui.utils import detect_os, get_pc_name

class DetachedWindow(QMainWindow):
    def __init__(self, tabs_widget: 'DynamicTabs', parent: 'DynamicTabs', title: str):
        """
        tabs_widget ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä DynamicTabs, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –≤–∏–¥–∂–µ—Ç–æ–º.
        parent ‚Äì —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ DynamicTabs, –∫—É–¥–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤–∫–ª–∞–¥–∫–∏.
        """
        super().__init__()
        self.setWindowTitle(title)
        self.setGeometry(200, 200, 500, 600)
        self.setCentralWidget(tabs_widget)
        self.tabs_widget = tabs_widget
        self.parent_tabs = parent  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ

    def closeEvent(self, event):
        """
        –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ.
        –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–∫–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.
        """
        for i in reversed(range(self.tabs_widget.count())):
            widget = self.tabs_widget.widget(i)
            title = self.tabs_widget.tabText(i)
            if isinstance(self.parent_tabs, DynamicTabs):
                self.parent_tabs.add_existing_tab(widget, title)
                if self in self.parent_tabs.detached_windows:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–∫–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
                    self.parent_tabs.detached_windows.remove(self)
        super().closeEvent(event)

class DynamicTabs(QTabWidget):
    def __init__(self, with_initial_tab=True):
        super().__init__()
        self.setTabsClosable(True)
        self.tabCloseRequested.connect(self.close_tab)
        self.setMovable(True)
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.detached_windows = []
        self.pinned_tabs = set()
        self.customContextMenuRequested.connect(self.open_context_menu)
        self.addTabButton = QPushButton("+")
        self.addTabButton.setFixedSize(30, 30)
        self.addTabButton.setStyleSheet("""
            QPushButton {
                font-size: 18px;
                background-color: #f0f0f0;
                border: 1px solid #ccc;
                border-radius: 5px;
                margin-bottom: 5px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
        """)
        self.addTabButton.clicked.connect(self.add_new_tab)

        corner_container = QWidget()
        corner_layout = QHBoxLayout(corner_container)
        corner_layout.setContentsMargins(0, 0, 0, 0)
        corner_layout.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        corner_layout.addWidget(self.addTabButton)
        self.setCornerWidget(corner_container, Qt.TopRightCorner)
        self.setStyleSheet("QTabWidget::corner { background: transparent; }")

        if with_initial_tab:
            self.add_new_tab()

    @staticmethod
    def create_tab_content(parent_tabs: 'DynamicTabs'):
        new_tab = QWidget()
        main_layout = QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        recent_connections_block = RecentConnectionsBlock()
        wp_map_block = WPMapBlock()  # üî• –û–±—ä—è–≤–ª—è–µ–º wp_map_block –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        # üî• –ü–µ—Ä–µ–¥–∞–µ–º wp_map_block –≤ PCConnectionBlock
        connection_block = PCConnectionBlock(recent_connections_block=recent_connections_block,
                                             wp_map_block=wp_map_block)

        # !!! –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π PCConnectionBlock –≤ WPMapBlock !!!
        wp_map_block = WPMapBlock(pc_connection_block=connection_block)

        # –ü–µ—Ä–µ–¥–∞–µ–º PCConnectionBlock –≤ RecentConnectionsBlock (—É–∂–µ –±—ã–ª–æ)
        recent_connections_block.pc_connection_block = connection_block

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É DynamicTabs
        connection_block.connection_successful.connect(parent_tabs.handle_connection)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–∫–µ—Ç
        main_layout.addWidget(connection_block)

        bottom_widget = QWidget()
        bottom_layout = QHBoxLayout()
        bottom_layout.addWidget(recent_connections_block)
        bottom_layout.addWidget(wp_map_block)

        bottom_widget.setLayout(bottom_layout)
        main_layout.addWidget(bottom_widget)

        new_tab.setLayout(main_layout)
        return new_tab

    def add_new_tab(self, _checked=False, title="–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è"):
        content = self.create_tab_content(self)
        index = self.addTab(content, title)
        self.setCurrentIndex(index)

    def add_existing_tab(self, widget, title="–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è"):
        index = self.addTab(widget, title)
        self.setCurrentIndex(index)

    def handle_connection(self, os_name: str, pc_name: str, ip: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –û–° –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
        """
        if os_name == "Windows":
            self.open_windows_gui(pc_name, ip)
        elif os_name == "Linux":
            self.open_linux_gui(ip)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.")

    def open_windows_gui(self, hostname, ip):
        # –°–æ–∑–¥–∞—ë–º –≤–∏–¥–∂–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Windows –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É.
        windows_widget = WindowsWindow(hostname, ip)
        self.add_existing_tab(windows_widget, f"Windows: {hostname}")

    def open_linux_gui(self, ip):
        # –°–æ–∑–¥–∞—ë–º –≤–∏–¥–∂–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Linux –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É.
        linux_widget = LinuxWindow(ip)
        self.add_existing_tab(linux_widget, f"Linux: {ip}")

    def detach_tab(self, index):
        """
        –û—Ç—Ä—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ.
        –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ ‚Äì –æ—Ç—Ä—ã–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.
        """
        if index in self.pinned_tabs or self.count() == 1:
            return

        title = self.tabText(index)
        widget = self.widget(index)
        self.removeTab(index)

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DynamicTabs –±–µ–∑ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        detached_tabs = DynamicTabs(with_initial_tab=False)
        detached_tabs.add_existing_tab(widget, title)

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        detached_window = DetachedWindow(detached_tabs, self, title)
        self.detached_windows.append(detached_window)
        detached_window.show()

    def close_tab(self, index):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∏ —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞.
        """
        if index in self.pinned_tabs or self.count() == 1:
            return

        widget = self.widget(index)
        if hasattr(widget, 'has_unsaved_changes') and widget.has_unsaved_changes():
            reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è',
                                         '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É?',
                                         QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                         QMessageBox.StandardButton.No)
            if reply == QMessageBox.StandardButton.No:
                return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –≤–∫–ª–∞–¥–∫–∏
        if hasattr(widget, 'close_session'):
            widget.close_session()

        self.removeTab(index)

    def open_context_menu(self, position):
        menu = QMenu()
        index = self.tabBar().tabAt(position)
        if index == -1:
            return  # –ö–ª–∏–∫ –≤–Ω–µ –≤–∫–ª–∞–¥–∫–∏

        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        rename_tab_action = menu.addAction("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É")
        if index in self.pinned_tabs:
            pin_tab_action = menu.addAction("–û—Ç–∫—Ä–µ–ø–∏—Ç—å –≤–∫–ª–∞–¥–∫—É")
        else:
            pin_tab_action = menu.addAction("–ó–∞–∫—Ä–µ–ø–∏—Ç—å –≤–∫–ª–∞–¥–∫—É")
        detach_tab_action = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ")
        close_tab_action = menu.addAction("–ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É")
        close_others_action = menu.addAction("–ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏")
        close_right_action = menu.addAction("–ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫–∏ —Å–ø—Ä–∞–≤–∞")
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –æ–∫–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å –≤–∫–ª–∞–¥–∫—É
        reattach_action = None
        if any(w.tabs_widget.count() > 0 for w in self.detached_windows):
            reattach_action = menu.addAction("–í–µ—Ä–Ω—É—Ç—å –≤–∫–ª–∞–¥–∫—É –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")

        action = menu.exec(self.tabBar().mapToGlobal(position))

        if action == rename_tab_action:
            new_title, ok = QInputDialog.getText(self, '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
            if ok and new_title:
                if index in self.pinned_tabs:
                    self.setTabText(index, f"üìå {new_title}")
                else:
                    self.setTabText(index, new_title)
        elif action == close_tab_action:
            self.close_tab(index)
        elif action == close_others_action:
            self.close_other_tabs(index)
        elif action == close_right_action:
            self.close_tabs_to_right(index)
        elif action == detach_tab_action:
            self.detach_tab(index)
        elif action == pin_tab_action:
            self.toggle_pin_tab(index)
        elif action == reattach_action:
            self.reattach_tab(index)

    def close_other_tabs(self, current_index):
        for i in reversed(range(self.count())):
            if i != current_index and i not in self.pinned_tabs:
                self.removeTab(i)

    def close_tabs_to_right(self, current_index):
        for i in reversed(range(current_index + 1, self.count())):
            if i not in self.pinned_tabs:
                self.removeTab(i)

    def toggle_pin_tab(self, index):
        """
        –ó–∞–∫—Ä–µ–ø–ª—è–µ—Ç –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–ª—è–µ—Ç –≤–∫–ª–∞–¥–∫—É.
        """
        current_title = self.tabText(index).replace("üìå ", "")
        if index in self.pinned_tabs:
            self.pinned_tabs.remove(index)
            self.setTabText(index, current_title)
        else:
            self.pinned_tabs.add(index)
            self.setTabText(index, f"üìå {current_title}")

    def reattach_tab(self, _index):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ.
        """
        for window in self.detached_windows:
            if window.tabs_widget.count() > 0:
                widget = window.tabs_widget.widget(0)
                title = window.tabs_widget.tabText(0)
                window.tabs_widget.removeTab(0)
                self.add_existing_tab(widget, title)
                if window.tabs_widget.count() == 0:
                    window.close()
                return

def handle_connection(self, os_name: str, pc_name: str, ip: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –û–° –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
    """
    try:
        if os_name == "Windows":
            self.open_windows_gui(pc_name, ip)
        elif os_name == "Linux":
            self.open_linux_gui(ip)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.")
    except Exception as e:
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é: {str(e)}")


def open_windows_gui(self, hostname, ip):
    try:
        windows_widget = WindowsWindow(hostname, ip)
        self.add_existing_tab(windows_widget, f"Windows: {hostname}")
    except Exception as e:
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {hostname}: {str(e)}")


def open_linux_gui(self, ip):
    linux_window = LinuxWindow(ip)
    self.add_existing_tab(linux_window, f"Linux: {ip}")
