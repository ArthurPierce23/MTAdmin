import time
import re
import logging
from typing import Dict, List, Any, Optional
from linux_gui.session_manager import SessionManager
import paramiko  # –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ SSHClient

logger = logging.getLogger(__name__)


class SystemInfo:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ Linux-—Ö–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ SSH.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SessionManager –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    """

    def __init__(
        self,
        hostname: str,
        username: str = "",
        password: str = "",
        port: int = 22,
        timeout: int = 10
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.

        :param hostname: IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞.
        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è SSH.
        :param password: –ü–∞—Ä–æ–ª—å –¥–ª—è SSH.
        :param port: –ü–æ—Ä—Ç SSH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22).
        :param timeout: –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        """
        self.hostname: str = hostname
        self.username: str = username
        self.password: str = password
        self.port: int = port
        self.timeout: int = timeout

    def get_client(self) -> paramiko.SSHClient:
        """
        –ü–æ–ª—É—á–∞–µ—Ç SSH-–∫–ª–∏–µ–Ω—Ç –∏–∑ SessionManager.
        –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ root-—Å–µ—Å—Å–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë.

        :return: –≠–∫–∑–µ–º–ø–ª—è—Ä paramiko.SSHClient –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.
        """
        session = SessionManager.get_instance(self.hostname, self.username, self.password)
        client = session.get_client()
        if session.root_session:
            logger.debug("üîë –ò—Å–ø–æ–ª—å–∑—É—é root-—Å–µ—Å—Å–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥")
            return session.root_session
        return client

    def get_system_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ: –∑–∞–≥—Ä—É–∑–∫—É CPU, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä, –¥–∞–Ω–Ω—ã–µ –æ RAM,
        –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö, MAC-–∞–¥—Ä–µ—Å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–¥–µ–ª—å CPU, –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã, uptime).

        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∏—Å—Ç–µ–º–µ.
        """
        try:
            session = SessionManager.get_instance(self.hostname, self.username, self.password)
            session.connect()  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
            client = session.get_client()
            logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ SSH-—Å–µ—Ä–≤–µ—Ä—É, –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")

            cpu_usage: int = self.get_cpu_usage(client)
            logger.debug(f"‚úÖ CPU Load: {cpu_usage}%")

            cores: int = self.get_cpu_cores(client)
            logger.debug(f"‚úÖ –Ø–¥–µ—Ä: {cores}")

            mem_used, mem_total, mem_used_percent = self.get_memory_info(client)
            logger.debug(f"‚úÖ RAM: {mem_used_percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–∑ {mem_total:.1f} GB")

            disks: List[Dict[str, Any]] = self.get_disks_info(client)
            logger.debug(f"‚úÖ –î–∏—Å–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(disks)}")

            mac_address: str = self.get_mac_address(client)
            logger.debug(f"‚úÖ MAC-–∞–¥—Ä–µ—Å: {mac_address}")

            extended_info: Dict[str, Any] = self.get_extended_info(client)
            logger.debug(f"‚úÖ CPU Model: {extended_info.get('CPU_Model')}")
            logger.debug(f"‚úÖ Motherboard Model: {extended_info.get('Motherboard_Model')}")
            logger.debug(f"‚úÖ Uptime: {extended_info.get('Uptime')}")

            info: Dict[str, Any] = {
                "CPU": {"Load": cpu_usage, "Cores": cores},
                "RAM": {"UsedPercent": mem_used_percent, "TotalGB": round(mem_total, 1)},
                "Disks": disks,
                "MAC_Address": mac_address,
                "CPU_Model": extended_info.get("CPU_Model", "N/A"),
                "Motherboard_Model": extended_info.get("Motherboard_Model", "N/A"),
                "Uptime": extended_info.get("Uptime", "N/A"),
            }
            logger.debug("‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã.")
            return info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}

    def get_cpu_usage(self, client: paramiko.SSHClient) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ CPU –ø—É—Ç—ë–º –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —á—Ç–µ–Ω–∏–π /proc/stat.

        :param client: SSHClient –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
        :return: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å CPU –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
        """
        cmd = "cat /proc/stat | grep '^cpu '"
        # –ü–µ—Ä–≤–æ–µ —á—Ç–µ–Ω–∏–µ
        stdin, stdout, stderr = client.exec_command(cmd)
        first_line = stdout.read().decode()
        values = first_line.strip().split()
        if len(values) < 5:
            return 0
        total1 = sum(int(val) for val in values[1:])
        idle1 = int(values[4])

        time.sleep(0.1)

        # –í—Ç–æ—Ä–æ–µ —á—Ç–µ–Ω–∏–µ
        stdin, stdout, stderr = client.exec_command(cmd)
        second_line = stdout.read().decode()
        values2 = second_line.strip().split()
        total2 = sum(int(val) for val in values2[1:])
        idle2 = int(values2[4])

        delta_total = total2 - total1
        delta_idle = idle2 - idle1
        if delta_total == 0:
            return 0
        usage = 100.0 * (delta_total - delta_idle) / delta_total
        return round(usage)

    def get_cpu_cores(self, client: paramiko.SSHClient) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã nproc.

        :param client: SSHClient –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä.
        """
        stdin, stdout, stderr = client.exec_command("nproc")
        cores_str = stdout.read().decode().strip()
        try:
            return int(cores_str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–¥–µ—Ä: {e}")
            return 0

    def get_memory_info(self, client: paramiko.SSHClient) -> tuple:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏–∑ /proc/meminfo.

        :param client: SSHClient –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
        :return: –ö–æ—Ä—Ç–µ–∂ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ_–ö–ë, –æ–±—â–∏–π_–æ–±—ä—ë–º_–≤_GB, –ø—Ä–æ—Ü–µ–Ω—Ç_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è).
        """
        cmd = "cat /proc/meminfo"
        stdin, stdout, stderr = client.exec_command(cmd)
        meminfo = stdout.read().decode()

        total_match = re.search(r'^MemTotal:\s+(\d+)\s+kB', meminfo, re.MULTILINE)
        avail_match = re.search(r'^MemAvailable:\s+(\d+)\s+kB', meminfo, re.MULTILINE)
        if total_match and avail_match:
            total_kb = int(total_match.group(1))
            avail_kb = int(avail_match.group(1))
            used_kb = total_kb - avail_kb
            used_percent = 100 * used_kb / total_kb
            total_gb = total_kb / (1024 * 1024)
            return used_kb, total_gb, round(used_percent)
        else:
            return 0, 0, 0

    def get_disks_info(self, client: paramiko.SSHClient) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–æ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã df.
        –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–¥–µ–ª—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç tmpfs –∏ devtmpfs.

        :param client: SSHClient –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
        :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–¥–µ–ª–∞—Ö.
        """
        disks: List[Dict[str, Any]] = []
        cmd = "df -B1 --output=target,size,avail,pcent -x tmpfs -x devtmpfs"
        stdin, stdout, stderr = client.exec_command(cmd)
        output = stdout.read().decode()
        lines = output.splitlines()
        if not lines or len(lines) < 2:
            return disks

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for line in lines[1:]:
            if not line.strip():
                continue
            parts = line.split()
            if len(parts) < 4:
                continue

            mount_point = parts[0]
            try:
                size_bytes = int(parts[1])
                avail_bytes = int(parts[2])
            except ValueError:
                continue

            try:
                used_percent = float(parts[3].rstrip('%'))
            except ValueError:
                used_percent = 0

            total_gb = size_bytes / (1024 ** 3)
            free_gb = avail_bytes / (1024 ** 3)

            disk_info = {
                "Letter": mount_point,
                "TotalGB": total_gb,
                "FreeGB": free_gb,
                "UsedPercent": used_percent,
            }
            disks.append(disk_info)
        return disks

    def get_mac_address(self, client: paramiko.SSHClient) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç MAC-–∞–¥—Ä–µ—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ (–¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ) —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

        :param client: SSHClient –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
        :return: MAC-–∞–¥—Ä–µ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        """
        cmd_default = "ip route | grep default"
        stdin, stdout, stderr = client.exec_command(cmd_default)
        default_route = stdout.read().decode().strip()
        interface: Optional[str] = None
        if default_route:
            parts = default_route.split()
            try:
                dev_index = parts.index("dev")
                interface = parts[dev_index + 1]
            except (ValueError, IndexError):
                interface = None

        if not interface:
            cmd_list = "ls /sys/class/net"
            stdin, stdout, stderr = client.exec_command(cmd_list)
            interfaces = stdout.read().decode().strip().split()
            non_loopback = [iface for iface in interfaces if iface != "lo"]
            if non_loopback:
                interface = non_loopback[0]
            else:
                return "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        cmd_mac = f"cat /sys/class/net/{interface}/address"
        stdin, stdout, stderr = client.exec_command(cmd_mac)
        mac_address = stdout.read().decode().strip()
        return mac_address

    def get_extended_info(self, client: paramiko.SSHClient) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –º–æ–¥–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (uptime).

        :param client: SSHClient –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ CPU_Model, Motherboard_Model –∏ Uptime.
        """
        data: Dict[str, Any] = {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stdin, stdout, stderr = client.exec_command("id -u")
        user_id = stdout.read().decode().strip()
        is_root: bool = (user_id == "0")
        logger.debug(f"üë§ UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} (Root: {is_root})")

        session = SessionManager.get_instance(self.hostname, self.username, self.password)
        root_password: Optional[str] = session.root_password if session.root_password else None

        if not is_root and not root_password:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç root-–ø–∞—Ä–æ–ª—å, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å sudo-–∫–æ–º–∞–Ω–¥—ã")
            return {
                "CPU_Model": "–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è root-–¥–æ—Å—Ç—É–ø",
                "Motherboard_Model": "–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è root-–¥–æ—Å—Ç—É–ø",
                "Uptime": "–û—à–∏–±–∫–∞"
            }

        def execute_command(command: str, use_sudo: bool = False, timeout: int = 5) -> Optional[str]:
            """
            –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Ö–æ—Å—Ç–µ.
            –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sudo —Å –ø–µ—Ä–µ–¥–∞—á–µ–π root-–ø–∞—Ä–æ–ª—è.

            :param command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
            :param use_sudo: –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è sudo.
            :param timeout: –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã.
            :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
            """
            try:
                if use_sudo and root_password:
                    full_command = f"echo '{root_password}' | sudo -S {command}"
                else:
                    full_command = command

                logger.debug(f"üõ†Ô∏è –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {full_command}")
                stdin, stdout, stderr = client.exec_command(full_command, timeout=timeout, get_pty=True)
                if use_sudo and root_password:
                    stdin.write(root_password + "\n")
                    stdin.flush()

                output = stdout.read().decode().strip()
                error = stderr.read().decode().strip()

                if "incorrect password" in error.lower():
                    logger.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è sudo")
                    return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å root"
                if "a terminal is required" in error:
                    logger.error("‚ùå sudo —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞!")
                    return "–û—à–∏–±–∫–∞: sudo —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"
                if "sudo: no password was provided" in error:
                    logger.error("‚ùå sudo –Ω–µ –ø–æ–ª—É—á–∏–ª –ø–∞—Ä–æ–ª—å!")
                    return "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–æ–ª—å root"
                if error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {command}: {error}")
                    return None

                # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
                clean_output = re.sub(r"^\s*\S+\s*\[sudo\] –ø–∞—Ä–æ–ª—å –¥–ª—è root:\s*", "", output, flags=re.MULTILINE)
                return clean_output if clean_output else None

            except Exception as e:
                logger.error(f"‚è≥ –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {command}: {e}")
                return None

        data["CPU_Model"] = execute_command("dmidecode -s processor-version", use_sudo=not is_root) or "–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è root-–¥–æ—Å—Ç—É–ø"
        data["Motherboard_Model"] = execute_command("dmidecode -s baseboard-product-name", use_sudo=not is_root) or "–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è root-–¥–æ—Å—Ç—É–ø"
        data["Uptime"] = execute_command("cat /proc/uptime | awk '{print $1}'") or "–û—à–∏–±–∫–∞"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º uptime (–≤ —á–∞—Å–∞—Ö)
        if data["Uptime"] and data["Uptime"] != "–û—à–∏–±–∫–∞":
            try:
                uptime_seconds = float(data["Uptime"])
                data["Uptime"] = f"{round(uptime_seconds / 3600, 1)} —á–∞—Å–æ–≤"
            except ValueError:
                data["Uptime"] = "–û—à–∏–±–∫–∞"

        logger.debug(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data}")
        return data
