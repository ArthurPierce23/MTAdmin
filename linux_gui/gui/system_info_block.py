# linux_gui/gui/system_info_block.py

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QGroupBox, QProgressBar, QTableWidget,
    QTableWidgetItem, QPushButton, QHeaderView, QSpinBox, QHBoxLayout,
    QStyle, QSizePolicy, QFrame, QSpacerItem
)
from PySide6.QtCore import QTimer, Qt, QThread, Signal, QSize
from PySide6.QtGui import QFont, QColor
import logging

from linux_gui.system_info import SystemInfo  # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ
from notifications import Notification

logger = logging.getLogger(__name__)


def get_cores_text(cores):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–¥–µ—Ä.
    –ù–∞–ø—Ä–∏–º–µ—Ä: 1 -> "1 —è–¥—Ä–æ", 2 -> "2 —è–¥—Ä–∞", 5 -> "5 —è–¥–µ—Ä".
    """
    try:
        cores = int(cores)
    except (ValueError, TypeError):
        return "N/A"
    if cores % 100 in (11, 12, 13, 14):
        ending = "—è–¥–µ—Ä"
    else:
        last_digit = cores % 10
        if last_digit == 1:
            ending = "—è–¥—Ä–æ"
        elif last_digit in (2, 3, 4):
            ending = "—è–¥—Ä–∞"
        else:
            ending = "—è–¥–µ—Ä"
    return f"{cores} {ending}"


class SystemInfoThread(QThread):
    """
    –ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π GUI.
    """
    data_ready = Signal(dict)

    def __init__(self, system_info: SystemInfo, parent=None):
        super().__init__(parent)
        self.system_info = system_info

    def run(self):
        try:
            info = self.system_info.get_system_info()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            info = {"error": str(e)}
        self.data_ready.emit(info)


class SystemInfoBlock(QWidget):
    """
    –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ Linux-—Ö–æ—Å—Ç–∞.
    –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ CPU, RAM, —Ç–∞–±–ª–∏—Ü—É –ø–æ –¥–∏—Å–∫–∞–º, –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É.
    """
    def __init__(self, hostname, parent=None):
        super().__init__(parent)
        self.hostname = hostname
        self.system_info = SystemInfo(hostname)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.safe_update)
        self.thread = None

        # –ë–∞–∑–æ–≤—ã–µ —à—Ä–∏—Ñ—Ç—ã
        self.base_font = QFont("Arial", 10)
        self.header_font = QFont("Arial", 12, QFont.Bold)

        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è CPU
        self.cpu_progress = QProgressBar()
        self.cpu_label = QLabel()
        self.cpu_progress.setFont(self.base_font)
        self.cpu_label.setFont(self.base_font)
        self.cpu_progress.setToolTip("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")

        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è RAM
        self.ram_progress = QProgressBar()
        self.ram_label = QLabel()
        self.ram_progress.setFont(self.base_font)
        self.ram_label.setFont(self.base_font)
        self.ram_progress.setToolTip("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏")

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–∏—Å–∫–∞–º
        self.disk_table = QTableWidget()
        self.disk_table.setFont(self.base_font)
        self.disk_table.setColumnCount(4)
        self.disk_table.setHorizontalHeaderLabels([
            "üíΩ –î–∏—Å–∫", "üì¶ –í—Å–µ–≥–æ", "üîì –°–≤–æ–±–æ–¥–Ω–æ", "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
        ])
        header = self.disk_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.disk_table.verticalHeader().setVisible(False)
        self.disk_table.setSelectionMode(QTableWidget.NoSelection)
        self.disk_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.disk_table.setFixedHeight(130)

        self.init_ui()
        self.safe_update()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∏–¥–∂–µ—Ç–∞."""
        self.group_box = QGroupBox("üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        self.group_box.setFont(self.header_font)

        layout = QVBoxLayout(self.group_box)

        # –ë–ª–æ–∫ –¥–ª—è CPU
        cpu_box = self.create_progress_box("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:", self.cpu_label, self.cpu_progress)
        # –ë–ª–æ–∫ –¥–ª—è RAM
        ram_box = self.create_progress_box("–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å:", self.ram_label, self.ram_progress)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.refresh_button.setFont(self.base_font)
        self.refresh_button.setIcon(self.style().standardIcon(QStyle.SP_BrowserReload))
        self.refresh_button.setIconSize(QSize(20, 20))
        self.refresh_button.setToolTip("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ")
        self.refresh_button.clicked.connect(self.safe_update)

        control_layout = QHBoxLayout()
        control_layout.addWidget(self.refresh_button)
        control_layout.addStretch()

        # –ë–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        interval_layout = QHBoxLayout()
        self.interval_label = QLabel("‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        self.interval_label.setFont(self.base_font)
        self.interval_input = QSpinBox()
        self.interval_input.setRange(0, 600)
        self.interval_input.setSuffix(" —Å–µ–∫")
        self.interval_input.setSingleStep(10)
        self.interval_input.setValue(0)
        self.interval_input.setFixedWidth(120)
        self.interval_input.setAlignment(Qt.AlignRight)
        self.interval_input.setFont(self.base_font)
        self.interval_input.setToolTip("–ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (0 ‚Äì –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
        self.interval_input.valueChanged.connect(self.update_timer)
        interval_layout.addWidget(self.interval_label)
        interval_layout.addWidget(self.interval_input)
        interval_layout.addStretch()

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
        layout.addWidget(cpu_box)
        layout.addWidget(ram_box)
        layout.addWidget(self.disk_table)
        layout.addLayout(control_layout)
        layout.addLayout(interval_layout)
        self.group_box.setLayout(layout)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤—â–∏–∫
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(12, 12, 12, 12)
        main_layout.setSpacing(10)
        main_layout.addWidget(self.group_box)

        spacer = QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding)
        main_layout.addItem(spacer)

        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setFrameShadow(QFrame.Sunken)
        main_layout.addWidget(separator)

        self.setLayout(main_layout)

    def create_progress_box(self, title, label, progress_bar):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (–ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–∞).
        """
        box = QWidget()
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        label.setText(title)
        label.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        progress_bar.setTextVisible(True)
        progress_bar.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        layout.addWidget(progress_bar)
        box.setLayout(layout)
        return box

    def update_timer(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º, –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """
        interval = self.interval_input.value() * 1000
        if interval > 0:
            self.timer.start(interval)
        else:
            self.timer.stop()

    def safe_update(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.
        """
        if self.thread and self.thread.isRunning():
            return
        self.thread = SystemInfoThread(self.system_info)
        self.thread.data_ready.connect(self.update_info)
        self.thread.start()

    def update_info(self, info: dict):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        """
        if not isinstance(info, dict) or "error" in info:
            error_msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" if not isinstance(info, dict) else info.get("error", "–û—à–∏–±–∫–∞")
            self.cpu_label.setText(f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {error_msg}")
            self.cpu_progress.setValue(0)
            self.cpu_progress.setFormat("")
            self.ram_label.setText("–û–ó–£: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            self.ram_progress.setValue(0)
            self.ram_progress.setFormat("")
            self.disk_table.setRowCount(0)
            Notification("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", f"‚ùå {error_msg}", "error").show_notification()
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ CPU
        cpu_data = info.get("CPU", {})
        cpu_load = cpu_data.get("Load", 0)
        cpu_cores = cpu_data.get("Cores", 0)
        value_cpu = int(cpu_load) if cpu_load is not None else 0
        self.cpu_progress.setValue(value_cpu)
        cores_text = get_cores_text(cpu_cores)
        self.cpu_progress.setFormat(f"{value_cpu}% / {cores_text}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ RAM
        ram_data = info.get("RAM", {})
        ram_used = ram_data.get("UsedPercent", 0)
        ram_total = ram_data.get("TotalGB", "N/A")
        value_ram = int(ram_used) if ram_used is not None else 0
        self.ram_progress.setValue(value_ram)
        total_text = f"{ram_total} GB" if ram_total != "N/A" else "N/A"
        self.ram_progress.setFormat(f"{value_ram}% / {total_text}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –¥–∏—Å–∫–∞–º
        disks = info.get("Disks", [])
        if isinstance(disks, dict):
            disks = [disks]
        self.disk_table.setRowCount(len(disks))
        for row, disk in enumerate(disks):
            self.add_disk_row(
                row,
                disk.get("Letter", "N/A"),
                disk.get("TotalGB", 0),
                disk.get("FreeGB", 0),
                disk.get("UsedPercent", 0)
            )

        Notification("–°–∏—Å—Ç–µ–º–∞", "‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "success").show_notification()

    def add_disk_row(self, row, letter, total, free, used_percent):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É –¥–∏—Å–∫–æ–≤ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        """
        items = [
            QTableWidgetItem(str(letter)),
            QTableWidgetItem(f"{total:.1f} GB"),
            QTableWidgetItem(f"{free:.1f} GB"),
            QTableWidgetItem(f"{used_percent:.1f}%")
        ]
        for col, item in enumerate(items):
            item.setTextAlignment(Qt.AlignCenter)
            item.setFlags(item.flags() & ~Qt.ItemIsEditable)
            self.disk_table.setItem(row, col, item)
