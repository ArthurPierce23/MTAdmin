from PySide6.QtWidgets import (
    QGroupBox, QVBoxLayout, QLabel, QPushButton,
    QTreeWidget, QTreeWidgetItem, QLineEdit, QHBoxLayout,
    QSizePolicy, QApplication
)
from PySide6.QtCore import Qt
import logging
from typing import List, Dict, Any

from linux_gui.session_manager import SessionManager
from linux_gui.process_manager import ProcessManager
from notifications import Notification

logger = logging.getLogger(__name__)


class ProcessManagerBlock(QGroupBox):
    """
    –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º Linux-—Ö–æ—Å—Ç–µ.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞, –ø–æ–¥–æ–±–Ω–æ–≥–æ htop, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
    –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º. –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    (—Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏ –∏ –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏).
    """

    def __init__(self, hostname: str, parent=None) -> None:
        """
        :param hostname: –ò–º—è –∏–ª–∏ IP-–∞–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞.
        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç.
        """
        super().__init__("üõ†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã", parent)
        self.hostname: str = hostname
        self.init_ui()

    def init_ui(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∏–¥–∂–µ—Ç–∞."""
        layout = QVBoxLayout(self)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.info_label = QLabel("üí° –ù–∞–∂–º–∏—Ç–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")
        self.info_label.setWordWrap(True)
        layout.addWidget(self.info_label)

        # –ë–ª–æ–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º
        search_layout = QHBoxLayout()
        search_label = QLabel("üîé –ü–æ–∏—Å–∫:")
        self.search_field = QLineEdit()
        self.search_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...")
        self.search_field.textChanged.connect(self.filter_table)
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_field)
        layout.addLayout(search_layout)

        # –î–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –≤–∏–¥–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        self.process_tree = QTreeWidget()
        self.process_tree.setHeaderLabels(["PID", "USER", "CPU%", "MEM%", "TIME", "COMMAND"])
        self.process_tree.setSortingEnabled(True)
        self.process_tree.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        layout.addWidget(self.process_tree)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã")
        self.refresh_button.setToolTip("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        self.refresh_button.clicked.connect(self.refresh_processes)
        layout.addWidget(self.refresh_button)

        self.setLayout(layout)

    def refresh_processes(self) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ProcessManager, –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏
        –≤—ã–≤–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–µ.
        """
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.refresh_button.setEnabled(False)
        self.refresh_button.setText("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

        try:
            session = SessionManager.get_instance(self.hostname, "", "").get_client()
            proc_manager = ProcessManager(session)
            data = proc_manager.get_processes_info()
            processes: List[Dict[str, Any]] = data.get("processes", [])

            self.populate_tree(processes)

            if not processes:
                Notification(
                    "‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                    "–ù–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Ö–æ—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.",
                    "warning",
                    parent=self.window()
                ).show_notification()
                return

            Notification(
                "üõ† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.",
                "success",
                parent=self.window()
            ).show_notification()

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            Notification(
                "üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö.\n–û—à–∏–±–∫–∞: `{e}`",
                "error",
                parent=self.window()
            ).show_notification()

        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            self.refresh_button.setEnabled(True)
            self.refresh_button.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã")

    def populate_tree(self, processes: List[Dict[str, Any]]) -> None:
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã–º–∏.

        :param processes: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö.
        """
        self.process_tree.clear()
        process_map: Dict[str, QTreeWidgetItem] = {}  # –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

        for process in processes:
            pid = process.get("PID", "")
            ppid = process.get("PPID", "")
            user = process.get("USER", "")
            cpu = process.get("%CPU", "")
            mem = process.get("%MEM", "")
            time_str = process.get("TIME", "")
            cmd = process.get("COMMAND", "")

            item = QTreeWidgetItem([str(pid), user, str(cpu), str(mem), time_str, cmd])
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
            item.setTextAlignment(2, Qt.AlignCenter)
            item.setTextAlignment(3, Qt.AlignCenter)

            process_map[str(pid)] = item

            # –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if ppid and str(ppid) in process_map:
                process_map[str(ppid)].addChild(item)
            else:
                self.process_tree.addTopLevelItem(item)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —á—Ç–æ-—Ç–æ –≤–≤–µ–¥–µ–Ω–æ
        self.filter_table(self.search_field.text())

    def filter_table(self, text: str) -> None:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.

        :param text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        """
        filter_text = text.strip().lower()

        if filter_text and all(self.process_tree.topLevelItem(i).isHidden()
                               for i in range(self.process_tree.topLevelItemCount())):
            Notification(
                "üîé –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                "warning",
                parent=self.window()
            ).show_notification()

        def match_item(item: QTreeWidgetItem) -> bool:
            """
            –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            —Ç–µ–∫—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞.
            """
            for col in range(item.columnCount()):
                if filter_text in item.text(col).lower():
                    return True
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for i in range(item.childCount()):
                if match_item(item.child(i)):
                    return True
            return False

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –∫–∞–∂–¥–æ–º—É —Ç–æ–ø-—É—Ä–æ–≤–Ω–µ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –¥–µ—Ä–µ–≤–∞
        for i in range(self.process_tree.topLevelItemCount()):
            item = self.process_tree.topLevelItem(i)
            item.setHidden(not match_item(item))
