# linux_gui/gui/process_manager_block.py

from PySide6.QtWidgets import (
    QGroupBox, QVBoxLayout, QLabel, QPushButton,
    QTableWidget, QTableWidgetItem, QHeaderView, QLineEdit, QHBoxLayout
)
from PySide6.QtCore import Qt
import logging

from linux_gui.session_manager import SessionManager
from linux_gui.process_manager import ProcessManager
from notifications import Notification

logger = logging.getLogger(__name__)


class ProcessManagerBlock(QGroupBox):
    """
    –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º Linux-—Ö–æ—Å—Ç–µ.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π htop, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –∏ –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º.
    """
    def __init__(self, hostname, parent=None):
        """
        :param hostname: –∏–º—è –∏–ª–∏ IP-–∞–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞.
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã –¥–æ–ø–æ–ª–Ω–µ–Ω —ç–º–æ–¥–∑–∏
        super().__init__("üõ†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã", parent)
        self.hostname = hostname
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –ø–æ—è—Å–Ω—è—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º
        self.info_label = QLabel("üí° –ù–∞–∂–º–∏—Ç–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã¬ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")
        self.info_label.setWordWrap(True)
        layout.addWidget(self.info_label)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ —Å —ç–º–æ–¥–∑–∏
        search_layout = QHBoxLayout()
        search_label = QLabel("üîé –ü–æ–∏—Å–∫:")
        self.search_field = QLineEdit()
        self.search_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...")
        self.search_field.textChanged.connect(self.filter_table)
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_field)
        layout.addLayout(search_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–æ–ø–æ–ª–Ω–µ–Ω—ã —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
        self.process_table = QTableWidget()
        self.process_table.setColumnCount(6)
        self.process_table.setHorizontalHeaderLabels([
            "üî¢ PID", "üë§ USER", "‚öôÔ∏è CPU%", "üíæ MEM%", "‚è±Ô∏è TIME", "üíª COMMAND"
        ])
        header = self.process_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.process_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.process_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.process_table.setSortingEnabled(True)  # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
        layout.addWidget(self.process_table)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —ç–º–æ–¥–∑–∏
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã")
        self.refresh_button.setToolTip("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        self.refresh_button.clicked.connect(self.refresh_processes)
        layout.addWidget(self.refresh_button)

        self.setLayout(layout)

    def refresh_processes(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö.

        –ü–æ–ª—É—á–∞–µ—Ç SSH-—Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ SessionManager, –≤—ã–∑—ã–≤–∞–µ—Ç ProcessManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö,
        –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        """
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.
            session = SessionManager.get_instance(self.hostname, "", "").get_client()
            proc_manager = ProcessManager(session)
            data = proc_manager.get_processes_info()
            processes = data.get("processes", [])
            self.populate_table(processes)
            Notification("–ü—Ä–æ—Ü–µ—Å—Å—ã", "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", "success").show_notification()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            Notification("–û—à–∏–±–∫–∞", f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö:\n{e}", "error").show_notification()

    def populate_table(self, processes):
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö.
        –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: PID, USER, CPU%, MEM%, TIME, COMMAND.
        """
        self.process_table.setRowCount(0)
        for process in processes:
            row_position = self.process_table.rowCount()
            self.process_table.insertRow(row_position)

            pid_item = QTableWidgetItem(process.get("PID", ""))
            user_item = QTableWidgetItem(process.get("USER", ""))
            cpu_item = QTableWidgetItem(process.get("%CPU", ""))
            mem_item = QTableWidgetItem(process.get("%MEM", ""))
            time_item = QTableWidgetItem(process.get("TIME", ""))
            cmd_item = QTableWidgetItem(process.get("COMMAND", ""))

            for item in [pid_item, user_item, cpu_item, mem_item, time_item, cmd_item]:
                item.setTextAlignment(Qt.AlignCenter)
            self.process_table.setItem(row_position, 0, pid_item)
            self.process_table.setItem(row_position, 1, user_item)
            self.process_table.setItem(row_position, 2, cpu_item)
            self.process_table.setItem(row_position, 3, mem_item)
            self.process_table.setItem(row_position, 4, time_item)
            self.process_table.setItem(row_position, 5, cmd_item)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –≤ –ø–æ–∏—Å–∫–µ —É–∂–µ —á—Ç–æ-—Ç–æ –≤–≤–µ–¥–µ–Ω–æ
        self.filter_table(self.search_field.text())

    def filter_table(self, text):
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.

        :param text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
        """
        filter_text = text.strip().lower()
        row_count = self.process_table.rowCount()
        col_count = self.process_table.columnCount()

        for row in range(row_count):
            row_visible = False
            for col in range(col_count):
                item = self.process_table.item(row, col)
                if item is not None and filter_text in item.text().lower():
                    row_visible = True
                    break
            self.process_table.setRowHidden(row, not row_visible)
