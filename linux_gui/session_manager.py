import paramiko
import logging
from typing import Optional
import time

logger = logging.getLogger(__name__)


class SessionManager:
    _instance: Optional["SessionManager"] = None

    def __init__(self, hostname: str, username: str, password: str,
                 root_username: Optional[str] = None, root_password: Optional[str] = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SessionManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.

        :param hostname: –ò–º—è –∏–ª–∏ IP-–∞–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞.
        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        :param password: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param root_username: (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è root-–¥–æ—Å—Ç—É–ø–∞.
        :param root_password: (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è root-–¥–æ—Å—Ç—É–ø–∞.
        """
        self.hostname: str = hostname
        self.username: str = username
        self.password: str = password
        self.root_username: Optional[str] = root_username
        self.root_password: Optional[str] = root_password
        self.client: Optional[paramiko.SSHClient] = None
        self.root_session: Optional[paramiko.SSHClient] = None  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∞–º–∏ root

    @classmethod
    def get_instance(cls, hostname: str, username: str, password: str,
                     root_username: Optional[str] = None, root_password: Optional[str] = None) -> "SessionManager":
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω-—ç–∫–∑–µ–º–ø–ª—è—Ä SessionManager.
        –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π.

        :return: –≠–∫–∑–µ–º–ø–ª—è—Ä SessionManager.
        """
        if cls._instance is None:
            cls._instance = cls(hostname, username, password, root_username, root_password)
        return cls._instance

    def connect(self) -> paramiko.SSHClient:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Ö–æ—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
        –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ root-—É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å root-–¥–æ—Å—Ç—É–ø.

        :return: –≠–∫–∑–µ–º–ø–ª—è—Ä paramiko.SSHClient.
        :raises Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        """
        if self.client is not None:
            return self.client

        try:
            logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.hostname} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username})")
            self.client = paramiko.SSHClient()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.client.connect(
                hostname=self.hostname,
                username=self.username,
                password=self.password,
                look_for_keys=False,
                allow_agent=False
            )
            logger.info("SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")

            if self.root_username and self.root_password:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã root-—É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å root-–¥–æ—Å—Ç—É–ø...")
                self.enable_root_session()
            else:
                logger.warning("Root-—É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–ï –ø–µ—Ä–µ–¥–∞–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ root-–¥–æ—Å—Ç—É–ø–∞.")

            return self.client
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")
            self.client = None
            raise e

    def enable_root_session(self) -> None:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å root-–¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ `sudo -S` –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ self.root_session.
        –ï—Å–ª–∏ root-–¥–æ—Å—Ç—É–ø –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, self.root_session —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ None.
        """
        try:
            if not self.root_password:
                logger.error("‚ùå Root-–ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å root-–¥–æ—Å—Ç—É–ø–∞!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å sudo –±–µ–∑ –ø–∞—Ä–æ–ª—è
            stdin, stdout, stderr = self.client.exec_command("sudo -n id -u")
            output = stdout.read().decode().strip()
            error = stderr.read().decode().strip()

            if "0" in output:
                logger.info("‚úÖ Root-–¥–æ—Å—Ç—É–ø —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!")
                self.root_session = self.client
                return

            if "password is required" in error.lower():
                logger.info("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ root-–ø–∞—Ä–æ–ª—è...")

            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–¥–∞—Ç—å root-–ø–∞—Ä–æ–ª—å
            full_command = f"echo '{self.root_password}' | sudo -S id -u"
            stdin, stdout, stderr = self.client.exec_command(full_command)
            output = stdout.read().decode().strip()
            error = stderr.read().decode().strip()

            if "0" in output:
                logger.info("‚úÖ Root-–¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
                self.root_session = self.client
            else:
                logger.error(f"‚ùå Root-–¥–æ—Å—Ç—É–ø –Ω–µ –ø–æ–ª—É—á–µ–Ω! –û—Ç–≤–µ—Ç: {output or error}")
                self.root_session = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å root-–¥–æ—Å—Ç—É–ø: {e}")
            self.root_session = None

    def has_root_access(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ root-–¥–æ—Å—Ç—É–ø.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sudo.

        :return: True, –µ—Å–ª–∏ root-–¥–æ—Å—Ç—É–ø –∏–º–µ–µ—Ç—Å—è, –∏–Ω–∞—á–µ False.
        """
        if not self.client or not self.root_password:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SSH-—Å–µ—Å—Å–∏—è –∏–ª–∏ root-–ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!")
            return False

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ root-–¥–æ—Å—Ç—É–ø–∞
            stdin, stdout, stderr = self.client.exec_command("sudo -n id -u")
            output = stdout.read().decode().strip()
            return "0" in output  # –ï—Å–ª–∏ ID —Ä–∞–≤–µ–Ω 0, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å root-–¥–æ—Å—Ç—É–ø
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ root-–¥–æ—Å—Ç—É–ø–∞: {e}")
            return False

    def execute(self, command: str, use_root: bool = False) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ SSH.
        –ï—Å–ª–∏ use_root True –∏ root-–¥–æ—Å—Ç—É–ø –∏–º–µ–µ—Ç—Å—è, –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ sudo.

        :param command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        :param use_root: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å root-–¥–æ—Å—Ç—É–ø–æ–º.
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        """
        try:
            if use_root and self.root_session and self.has_root_access():
                full_command = f"echo '{self.root_password}' | sudo -S {command}"
            else:
                full_command = command

            stdin, stdout, stderr = self.client.exec_command(full_command)
            output = stdout.read().decode().strip()
            error = stderr.read().decode().strip()

            if error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{command}': {error}")
                return error
            return output if output else "–û—à–∏–±–∫–∞"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{command}': {e}")
            return "–û—à–∏–±–∫–∞"

    def get_client(self) -> paramiko.SSHClient:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π SSH-–∫–ª–∏–µ–Ω—Ç.
        –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.

        :return: –≠–∫–∑–µ–º–ø–ª—è—Ä paramiko.SSHClient.
        """
        if self.client is None:
            self.connect()
        return self.client

    def close_session(self) -> None:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç SSH-—Å–µ—Å—Å–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω-—ç–∫–∑–µ–º–ø–ª—è—Ä SessionManager.
        """
        if self.client:
            self.client.close()
            self.client = None
            self.root_session = None
            SessionManager._instance = None
