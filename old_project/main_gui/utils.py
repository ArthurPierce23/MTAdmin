import re
import platform
import subprocess
import socket
import struct
import concurrent.futures
from functools import lru_cache


def is_valid_ip(ip):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å IPv4-–∞–¥—Ä–µ—Å–∞."""
    pattern = r"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
    return bool(re.match(pattern, ip))


@lru_cache(maxsize=128)
def _ping_ip(ip, timeout=1):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IP —á–µ—Ä–µ–∑ ping."""
    try:
        command = ['ping', '-c', '1', '-W', str(timeout), ip] if platform.system().lower() != 'windows' else \
                  ['ping', '-n', '1', '-w', str(timeout * 1000), ip]
        return subprocess.call(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=timeout + 1) == 0
    except subprocess.TimeoutExpired:
        return False


def _get_os_via_ttl(ttl):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–° –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é TTL."""
    if ttl is None:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if ttl <= 64:
        return "Linux"
    elif 65 <= 128:
        return "Windows"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def _check_tcp_port(ip, port, timeout=1):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ TCP-–ø–æ—Ä—Ç."""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            return s.connect_ex((ip, port)) == 0
    except socket.error:
        return False


def _detect_os_via_sockets(ip):
    """–ê–Ω–∞–ª–∏–∑ TCP-–æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ ICMP –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            s.connect((ip, 135))  # RPC Endpoint Mapper (–æ–±—ã—á–Ω–æ Windows)
            data = s.recv(1024)
            if data:
                return "Windows"
    except (socket.timeout, socket.error):
        pass
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def _get_ttl(ip, timeout=1):
    """–ü–æ–ª—É—á–∞–µ—Ç TTL –ø–∞–∫–µ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–æ–º)"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP) as s:
            s.settimeout(timeout)
            packet = struct.pack('!BBHHH', 8, 0, 0, 0, 0)  # ICMP Echo Request
            s.sendto(packet, (ip, 1))
            response = s.recvfrom(256)[0]
            return response[8] if len(response) > 8 else None
    except (PermissionError, socket.error):
        return None


def detect_os(ip, timeout=2):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–° —á–µ—Ä–µ–∑ TTL, –ø–æ—Ä—Ç—ã –∏ TCP-–∞–Ω–∞–ª–∏–∑"""

    if not is_valid_ip(ip):
        return "–ù–µ–≤–µ—Ä–Ω—ã–π IP"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IP
    if not _ping_ip(ip, timeout):
        print(f"[DEBUG] {ip} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping.")
        return "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    # üî• –ö–ª—é—á–µ–≤—ã–µ Windows –∏ Linux –ø–æ—Ä—Ç—ã
    windows_ports = [3389, 49003, 445, 137, 139, 135, 5985, 5986]
    linux_ports = [22]

    all_ports = windows_ports + linux_ports

    # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    with concurrent.futures.ThreadPoolExecutor() as executor:
        results = list(executor.map(lambda port: _check_tcp_port(ip, port, timeout), all_ports))

    open_ports = {port: results[i] for i, port in enumerate(all_ports)}

    print(f"[DEBUG] –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {open_ports}")

    # üî• –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°:
    if any(open_ports[p] for p in windows_ports):
        return "Windows"

    if open_ports[22]:
        return "Linux"  # –¢–µ–ø–µ—Ä—å Linux –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

    # üî• –ï—Å–ª–∏ –ø–æ—Ä—Ç—ã –Ω–µ –ø–æ–º–æ–≥–ª–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º TTL
    ttl = _get_ttl(ip, timeout)
    print(f"[DEBUG] TTL: {ttl}")

    if ttl:
        return _get_os_via_ttl(ttl)

    # üî• –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –ø—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑ TCP-–æ—Ç–≤–µ—Ç–æ–≤
    return _detect_os_via_sockets(ip)
