import subprocess
import platform
import logging
from typing import List, Dict, Any

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QTableWidget, QTableWidgetItem,
    QGroupBox, QHeaderView, QFrame, QPushButton
)
from PySide6.QtCore import Qt, QTimer
from notifications import Notification

logger = logging.getLogger(__name__)


class ActiveUsers(QWidget):
    """
    –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è —Ö–æ—Å—Ç–∞ (–∏–ª–∏ IP), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è —Å–µ—Å—Å–∏–∏.
    """

    def __init__(self, hostname: str, parent: QWidget = None) -> None:
        super().__init__(parent)
        self.hostname: str = hostname
        self.EXCLUDED_USERNAMES: set[str] = {
            'SYSTEM', 'LOCAL SERVICE', 'pdqdeployment',
            'NETWORK SERVICE', '–°–ò–°–¢–ï–ú–ê', '', '65536'
        }
        self.STATUS_EMOJI: Dict[str, str] = {
            'Active': 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ',
            'Active*': 'üü° –ê–∫—Ç–∏–≤–Ω–æ (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)',
            '–ê–∫—Ç–∏–≤–Ω–æ': 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ',
            '–ê–∫—Ç–∏–≤–Ω–æ*': 'üü° –ê–∫—Ç–∏–≤–Ω–æ (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)',
            'Disc': 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ',
            'Disconnected': '‚ö´ –†–∞–∑—ä–µ–¥–∏–Ω–µ–Ω–æ',
        }
        self._init_ui()
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 100 –º—Å, –∑–∞—Ç–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        QTimer.singleShot(100, self.update_info)
        self.refresh_timer = QTimer(self)
        self.refresh_timer.timeout.connect(self.update_info)
        self.refresh_timer.start(60000)

    def _init_ui(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∏–¥–∂–µ—Ç–∞.
        """
        layout = QVBoxLayout(self)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(15)

        # –ì—Ä—É–ø–ø–∞ "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        self.group_box = QGroupBox("üíª –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        self.group_box.setObjectName("groupBox")  # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑ styles.py
        group_layout = QVBoxLayout()
        group_layout.setContentsMargins(10, 10, 10, 10)
        group_layout.setSpacing(10)

        self.info_label = QLabel("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        self.info_label.setObjectName("title")  # –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        group_layout.addWidget(self.info_label)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
        self.table = QTableWidget(0, 3)
        self.table.setObjectName("usersTable")  # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑ styles.py
        self.table.setHorizontalHeaderLabels(["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "üîë –¢–∏–ø –≤—Ö–æ–¥–∞", "üîÑ –°—Ç–∞—Ç—É—Å"])
        self.table.verticalHeader().setVisible(False)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.setFixedHeight(150)
        group_layout.addWidget(self.table)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.refresh_button.setObjectName("refreshButton")
        self.refresh_button.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        self.refresh_button.clicked.connect(self._on_refresh_clicked)
        group_layout.addWidget(self.refresh_button)

        self.group_box.setLayout(group_layout)
        layout.addWidget(self.group_box)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setFrameShadow(QFrame.Sunken)
        separator.setObjectName("separator")  # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑ styles.py
        layout.addWidget(separator)

    def _on_refresh_clicked(self) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        –ü—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        """
        self.update_info(notify_on_update=True)

    def update_info(self, notify_on_update: bool = False) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö.

        :param notify_on_update: –ï—Å–ª–∏ True, –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
                                  –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è.
        """
        result: Dict[str, Any] = self.get_active_sessions()
        if "error" in result:
            error_msg: str = result['error']
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –≤–∏–¥–∂–µ—Ç–µ ‚Äì —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–≤–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            self.info_label.setText(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            self.table.setRowCount(0)
            if notify_on_update:
                Notification(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö: {error_msg}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    "error",
                    duration=3000,
                    parent=self.window()
                ).show_notification()
        else:
            sessions: List[Dict[str, str]] = result.get("sessions", [])
            self._update_table(sessions)
            count: int = len(sessions)
            if count:
                sessions_text: str = self.declension_sessions(count)
                self.info_label.setText(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({count} {sessions_text})")
            else:
                self.info_label.setText("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            if notify_on_update:
                if count:
                    Notification(
                        "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                        f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {count} {sessions_text}.",
                        'success',
                        duration=3000,
                        parent=self.window()
                    ).show_notification()

                else:
                    Notification(
                        "‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
                        'info',
                        duration=3000,
                        parent=self.window()
                    ).show_notification()

    def _update_table(self, sessions: List[Dict[str, str]]) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏.

        :param sessions: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º.
        """
        new_row_count: int = len(sessions)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        self.table.setRowCount(new_row_count)
        for row, session in enumerate(sessions):
            # –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–µ–ª–∞–µ–º –∏—Ö –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏
            user_item = QTableWidgetItem(f"üë§ {session.get('user', '')}")
            user_item.setFlags(user_item.flags() & ~Qt.ItemIsEditable)

            logon_type: str = session.get("logon_type", "")
            type_icon: str = "üíª" if logon_type == "–õ–æ–∫–∞–ª—å–Ω—ã–π" else "üåê"
            type_item = QTableWidgetItem(f"{type_icon} {logon_type}")
            type_item.setFlags(type_item.flags() & ~Qt.ItemIsEditable)

            status_text: str = session.get("status", "")
            status_item = QTableWidgetItem(self.STATUS_EMOJI.get(status_text, f"‚ùî {status_text}"))
            status_item.setToolTip(self._get_status_tooltip(status_text))
            status_item.setFlags(status_item.flags() & ~Qt.ItemIsEditable)

            self.table.setItem(row, 0, user_item)
            self.table.setItem(row, 1, type_item)
            self.table.setItem(row, 2, status_item)

    def _get_status_tooltip(self, status: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏.

        :param status: –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏.
        :return: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
        """
        tooltips: Dict[str, str] = {
            'Active': "–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è",
            'Disc': "–°–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞",
            'Disconnected': "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ",
        }
        return tooltips.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

    def get_active_sessions(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ quser –∏–ª–∏ qwinsta.
        –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Windows.

        :return: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º "sessions" –∏–ª–∏ "error".
        """
        try:
            if platform.system() != "Windows":
                return {"error": "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"}
            is_remote: bool = self.hostname.lower() not in ('localhost', '127.0.0.1')
            output: str = self._run_remote_command(is_remote)
            sessions: List[Dict[str, str]] = self._parse_output(output, is_remote)
            return {"sessions": sessions}
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            return {"error": str(e)}

    def _run_remote_command(self, is_remote: bool) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É (quser –∏–ª–∏ qwinsta) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.

        :param is_remote: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
        :return: –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã.
        :raises RuntimeError: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π.
        """
        command: str = "qwinsta" if is_remote else "quser"
        args: List[str] = [command]
        if is_remote:
            args.append("/server:" + self.hostname)
        result = subprocess.run(
            args, capture_output=True, text=True, encoding='cp866',
            errors='replace', shell=True
        )
        if result.returncode != 0:
            raise RuntimeError(result.stderr or f"Command failed with code {result.returncode}")
        return result.stdout

    def _parse_output(self, output: str, is_remote: bool) -> List[Dict[str, str]]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞.

        :param output: –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã.
        :param is_remote: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è qwinsta.
        :return: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π.
        """
        sessions: List[Dict[str, str]] = []
        lines: List[str] = [line.rstrip('\n') for line in output.split('\n') if line.strip()]
        if not lines:
            return sessions
        return self._parse_qwinsta(lines) if is_remote else self._parse_quser(lines)

    def _parse_quser(self, lines: List[str]) -> List[Dict[str, str]]:
        """
        –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã quser (–ª–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞).

        :param lines: –°—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞.
        :return: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π.
        :raises ValueError: –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º.
        """
        sessions: List[Dict[str, str]] = []
        header_line: str = lines[0].strip()
        col_positions: List[int] = self._get_column_positions(header_line)
        headers: List[str] = self._split_line_by_positions(header_line, col_positions)
        try:
            username_col: int = self._get_column_index(headers, ['USERNAME', '–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨'])
            session_col: int = self._get_column_index(headers, ['SESSIONNAME', '–°–ï–ê–ù–°'])
            state_col: int = self._get_column_index(headers, ['STATE', '–°–¢–ê–¢–£–°'])
        except ValueError as e:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ quser: {e}")
        for line in lines[1:]:
            parts: List[str] = self._split_line_by_positions(line, col_positions)
            username: str = parts[username_col] if username_col < len(parts) else ''
            session_type: str = parts[session_col] if session_col < len(parts) else ''
            state: str = parts[state_col] if state_col < len(parts) else ''
            if username and username not in self.EXCLUDED_USERNAMES:
                sessions.append({
                    "user": username,
                    "logon_type": self._get_session_type(session_type),
                    "status": state,
                })
        return sessions

    def _parse_qwinsta(self, lines: List[str]) -> List[Dict[str, str]]:
        """
        –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã qwinsta (—É–¥–∞–ª—ë–Ω–Ω—ã–π —Ö–æ—Å—Ç).

        :param lines: –°—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞.
        :return: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π.
        :raises ValueError: –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º.
        """
        sessions: List[Dict[str, str]] = []
        header_line: str = lines[0].strip()
        col_positions: List[int] = self._get_column_positions(header_line)
        headers: List[str] = self._split_line_by_positions(header_line, col_positions)
        try:
            session_col: int = self._get_column_index(headers, ['SESSIONNAME', '–°–ï–ê–ù–°'])
            user_col: int = self._get_column_index(headers, ['USERNAME', '–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨'])
            state_col: int = self._get_column_index(headers, ['STATE', '–°–¢–ê–¢–£–°'])
        except ValueError as e:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ qwinsta: {e}")
        for line in lines[1:]:
            parts: List[str] = self._split_line_by_positions(line, col_positions)
            session_type: str = parts[session_col] if session_col < len(parts) else ''
            username: str = parts[user_col] if user_col < len(parts) else ''
            state: str = parts[state_col] if state_col < len(parts) else ''
            if username and username not in self.EXCLUDED_USERNAMES and not username.isdigit():
                sessions.append({
                    "user": username,
                    "logon_type": self._get_session_type(session_type),
                    "status": state,
                })
        return sessions

    def _get_column_positions(self, header_line: str) -> List[int]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞.

        :param header_line: –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
        :return: –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –Ω–∞—á–∞–ª–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.
        """
        col_positions: List[int] = []
        in_column = False
        for i, char in enumerate(header_line):
            if char != ' ':
                if not in_column:
                    col_positions.append(i)
                    in_column = True
            else:
                in_column = False
        col_positions.append(len(header_line) + 1)
        return col_positions

    def _split_line_by_positions(self, line: str, positions: List[int]) -> List[str]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º.

        :param line: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        :param positions: –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π.
        :return: –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫.
        """
        parts: List[str] = []
        for i in range(len(positions) - 1):
            start = positions[i]
            end = positions[i + 1]
            parts.append(line[start:end].strip())
        return parts

    def _get_column_index(self, headers: List[str], possible_names: List[str]) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –∏–º–µ–Ω–∞–º.

        :param headers: –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
        :param possible_names: –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞.
        :return: –ò–Ω–¥–µ–∫—Å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.
        :raises ValueError: –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –∏–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        for name in possible_names:
            if name in headers:
                return headers.index(name)
        raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {possible_names}")

    def _get_session_type(self, session_name: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–µ—Å—Å–∏–∏ –ø–æ –∏–º–µ–Ω–∏.

        :param session_name: –ò–º—è —Å–µ—Å—Å–∏–∏.
        :return: –¢–∏–ø —Å–µ—Å—Å–∏–∏: "RDP", "–õ–æ–∫–∞–ª—å–Ω—ã–π" –∏–ª–∏ "–£–¥–∞–ª—ë–Ω–Ω—ã–π".
        """
        session_name = session_name.lower()
        if 'rdp' in session_name or '—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞' in session_name:
            return "RDP"
        if 'console' in session_name or '–∫–æ–Ω—Å–æ–ª—å' in session_name:
            return "–õ–æ–∫–∞–ª—å–Ω—ã–π"
        return "–£–¥–∞–ª—ë–Ω–Ω—ã–π"

    def declension_sessions(self, count: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ "—Å–µ—Å—Å–∏—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.

        :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π.
        :return: –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º.
        """
        if 11 <= (count % 100) <= 14:
            return "—Å–µ—Å—Å–∏–π"
        remainder = count % 10
        if remainder == 1:
            return "—Å–µ—Å—Å–∏—è"
        elif 2 <= remainder <= 4:
            return "—Å–µ—Å—Å–∏–∏"
        return "—Å–µ—Å—Å–∏–π"
