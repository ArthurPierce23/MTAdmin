from pathlib import Path
import subprocess

from PySide6.QtCore import Qt, QSize, Signal, QRect, QUrl
from PySide6.QtGui import QColor, QPainter, QFontMetrics, QIcon, QAction, QDesktopServices, QFont
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QPushButton, QListWidget, QGroupBox,
    QListWidgetItem, QMenu, QLineEdit, QHBoxLayout, QLabel,
    QInputDialog, QStyledItemDelegate, QFileDialog, QMessageBox, QSpacerItem, QSizePolicy, QFrame
)

from notifications import Notification
from windows_gui.scripts import ScriptsManager

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ
import logging
logger = logging.getLogger(__name__)


class ScriptItemDelegate(QStyledItemDelegate):
    """
    –î–µ–ª–µ–≥–∞—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏.
    """
    def paint(self, painter: QPainter, option, index) -> None:
        # –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        super().paint(painter, option, index)
        script = index.data(Qt.UserRole)
        if script and script.get('tags'):
            painter.save()
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Å—Ç–∏–ª—è –¥–ª—è —Ç–µ–≥–æ–≤
            tag_spacing = 5
            tag_height = 20
            tag_radius = 8
            font_metrics = QFontMetrics(option.font)

            # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–≥–∏ —Å–ø—Ä–∞–≤–∞ (–æ—Ç—Å—Ç—É–ø 10px –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è)
            x_pos = option.rect.right() - 10

            # –†–∏—Å—É–µ–º —Ç–µ–≥–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for tag in reversed(script['tags']):
                text_width = font_metrics.horizontalAdvance(tag) + 20
                tag_rect = QRect(
                    x_pos - text_width,
                    option.rect.top() + (option.rect.height() - tag_height) // 2,
                    text_width,
                    tag_height
                )
                # –ï—Å–ª–∏ —Ç–µ–≥ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É ‚Äì –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å
                if tag_rect.left() < option.rect.left():
                    break

                painter.setBrush(QColor(230, 240, 255))
                painter.setPen(Qt.NoPen)
                painter.drawRoundedRect(tag_rect, tag_radius, tag_radius)
                painter.setPen(QColor(50, 100, 200))
                painter.drawText(tag_rect.adjusted(5, 0, -5, 0), Qt.AlignCenter, tag)
                x_pos -= text_width + tag_spacing
            painter.restore()


class ScriptsBlock(QWidget):
    """
    –í–∏–¥–∂–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Å–∫—Ä–∏–ø—Ç–æ–≤:
    –∑–∞–ø—É—Å–∫, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏.
    """
    script_executed = Signal(str, str)  # (script_name, —Å—Ç–∞—Ç—É—Å)

    def __init__(self, hostname: str, parent: QWidget = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–∂–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤.
        """
        super().__init__(parent)
        self.manager = ScriptsManager(hostname)
        self._init_ui()
        self.load_scripts()
        self.setMinimumSize(600, 400)

    def _init_ui(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.group_box = QGroupBox("üìú –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤")
        self.group_box.setObjectName("groupBox")  # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ styles.py

        group_layout = QVBoxLayout(self.group_box)
        group_layout.setSpacing(10)
        group_layout.setContentsMargins(12, 12, 12, 12)

        # –§–∏–ª—å—Ç—Ä—ã: –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ç–µ–≥–∞–º
        filter_layout = QHBoxLayout()
        filter_layout.setSpacing(10)

        filter_label = QLabel("–§–∏–ª—å—Ç—Ä—ã:")
        filter_layout.addWidget(filter_label)

        self.search_input = QLineEdit()
        self.search_input.setObjectName("searchInput")
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏...")
        self.search_input.setClearButtonEnabled(True)
        self.search_input.setToolTip("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏")
        filter_layout.addWidget(self.search_input)

        self.tag_input = QLineEdit()
        self.tag_input.setObjectName("tagInput")
        self.tag_input.setPlaceholderText("üè∑ –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º...")
        self.tag_input.setClearButtonEnabled(True)
        self.tag_input.setToolTip("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        filter_layout.addWidget(self.tag_input)

        filter_layout.addItem(QSpacerItem(20, 10, QSizePolicy.Expanding, QSizePolicy.Minimum))

        # –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.scripts_list = QListWidget()
        self.scripts_list.setObjectName("scriptsList")
        self.scripts_list.setItemDelegate(ScriptItemDelegate())
        self.scripts_list.setContextMenuPolicy(Qt.CustomContextMenu)
        self.scripts_list.setAlternatingRowColors(True)
        self.scripts_list.setMinimumHeight(200)
        self.scripts_list.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        btn_layout.setSpacing(10)

        self.add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
        self.add_btn.setObjectName("addScriptButton")
        self.add_btn.setMinimumHeight(40)
        self.add_btn.setCursor(Qt.PointingHandCursor)
        self.add_btn.setToolTip("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É")

        self.tag_btn = QPushButton("üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏")
        self.tag_btn.setObjectName("manageTagsButton")
        self.tag_btn.setMinimumHeight(40)
        self.tag_btn.setCursor(Qt.PointingHandCursor)
        self.tag_btn.setToolTip("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏")

        btn_layout.addStretch()
        btn_layout.addWidget(self.add_btn)
        btn_layout.addWidget(self.tag_btn)
        btn_layout.addStretch()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.search_input.textChanged.connect(self.apply_filters)
        self.tag_input.textChanged.connect(self.apply_filters)
        self.scripts_list.customContextMenuRequested.connect(self.show_context_menu)
        self.scripts_list.itemDoubleClicked.connect(self.execute_script)
        self.add_btn.clicked.connect(self.add_script_dialog)
        self.tag_btn.clicked.connect(self.manage_tags_dialog)

        group_layout.addLayout(filter_layout)
        group_layout.addWidget(self.scripts_list, 1)
        group_layout.addLayout(btn_layout)

        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(12, 12, 12, 12)
        main_layout.setSpacing(10)
        main_layout.addWidget(self.group_box)

        separator = QFrame()
        separator.setObjectName("separator")
        separator.setFrameShape(QFrame.HLine)
        separator.setFrameShadow(QFrame.Sunken)
        main_layout.addWidget(separator)

        self.setLayout(main_layout)

    def _notify(self, message: str, notif_type: str = "success", duration: int = 3000) -> None:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        Notification(message, notif_type, duration, parent=self.window()).show_notification()

    def load_scripts(self) -> None:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö.
        """
        self.scripts_list.clear()
        try:
            scripts = self.manager.get_scripts()
            for script in scripts:
                item_text = f"{script['name']} [{script['type']}]"
                item = QListWidgetItem(item_text)
                item.setData(Qt.UserRole, script)
                self.scripts_list.addItem(item)
            self.apply_filters()
            logger.info("–°–∫—Ä–∏–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            Notification(
                "‚úÖ –°–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                "–°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.",
                "success",
                duration=3000,
                parent=self.window()
            ).show_notification()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}")
            Notification(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã: {e}",
                "error",
                duration=3000,
                parent=self.window()
            ).show_notification()

    def apply_filters(self) -> None:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –ø–æ –∏–º–µ–Ω–∏ –∏ —Ç–µ–≥–∞–º.
        (–ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ QSortFilterProxyModel –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö)
        """
        search_text = self.search_input.text().lower().strip()
        tag_text = self.tag_input.text().lower().strip()
        filter_tags = [t.strip() for t in tag_text.split(',') if t.strip()]

        for i in range(self.scripts_list.count()):
            item = self.scripts_list.item(i)
            script = item.data(Qt.UserRole)
            name_match = search_text in item.text().lower() if search_text else True
            script_tags = [t.lower() for t in script.get('tags', [])]
            tags_match = all(ft in script_tags for ft in filter_tags) if filter_tags else True
            item.setHidden(not (name_match and tags_match))

    def show_context_menu(self, pos) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ –¥–ª—è –ø—É—Å—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.
        """
        menu = QMenu()
        item = self.scripts_list.itemAt(pos)
        if item:
            execute_action = QAction("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", self)
            execute_action.triggered.connect(lambda _, itm=item: self.execute_script(itm))
            edit_file_action = QAction("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç", self)
            edit_file_action.triggered.connect(lambda _, itm=item: self.edit_script_dialog(itm))
            rename_action = QAction("‚úé –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", self)
            rename_action.triggered.connect(lambda _, itm=item: self.rename_script_dialog(itm))
            edit_tags_action = QAction("üè∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏", self)
            edit_tags_action.triggered.connect(lambda _, itm=item: self.edit_tags_dialog(itm))
            delete_action = QAction("‚ùå –£–¥–∞–ª–∏—Ç—å", self)
            delete_action.triggered.connect(lambda _, itm=item: self.delete_script_dialog(itm))
            menu.addAction(execute_action)
            menu.addAction(edit_file_action)
            menu.addSeparator()
            menu.addAction(rename_action)
            menu.addAction(edit_tags_action)
            menu.addAction(delete_action)
        else:
            refresh_action = QAction("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", self)
            refresh_action.triggered.connect(self.load_scripts)
            add_action = QAction("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç", self)
            add_action.triggered.connect(self.add_script_dialog)
            menu.addAction(refresh_action)
            menu.addAction(add_action)
        menu.exec_(self.scripts_list.viewport().mapToGlobal(pos))

    def add_script_dialog(self) -> None:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.
        """
        path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç", "",
            "–°–∫—Ä–∏–ø—Ç—ã (*.ps1 *.bat *.cmd *.vbs);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        if path:
            tags, ok = QInputDialog.getText(
                self, "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
            )
            if ok:
                tags_list = [t.strip().lower() for t in tags.split(',') if t.strip()]
                try:
                    self.manager.add_script(path, tags_list)
                    self.load_scripts()
                    Notification(
                        "‚úÖ –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
                        "–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.",
                        "success",
                        duration=3000,
                        parent=self.window()
                    ).show_notification()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
                    Notification(
                        "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞",
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: {e}",
                        "error",
                        duration=3000,
                        parent=self.window()
                    ).show_notification()

    def rename_script_dialog(self, item: QListWidgetItem) -> None:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
        """
        script = item.data(Qt.UserRole)
        old_name = script['name']
        new_name, ok = QInputDialog.getText(
            self, "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", QLineEdit.Normal, old_name
        )
        if ok and new_name and new_name != old_name:
            try:
                extension = Path(script['full_name']).suffix
                new_full_name = f"{new_name}{extension}"
                if self.manager.rename_script(script['full_name'], new_full_name):
                    self.load_scripts()
                    Notification(
                        "‚úÖ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω",
                        "–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.",
                        "success",
                        duration=3000,
                        parent=self.window()
                    ).show_notification()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
                Notification(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç: {e}",
                    "error",
                    duration=3000,
                    parent=self.window()
                ).show_notification()

    def delete_script_dialog(self, item: QListWidgetItem) -> None:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.
        """
        script = item.data(Qt.UserRole)
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç '{script['name']}'?",
            QMessageBox.Yes | QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            try:
                self.manager.delete_script(script['full_name'])
                self.load_scripts()
                Notification(
                    "‚úÖ –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª—ë–Ω",
                    "–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.",
                    "success",
                    duration=3000,
                    parent=self.window()
                ).show_notification()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                Notification(
                    "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: {e}",
                    "error",
                    duration=3000,
                    parent=self.window()
                ).show_notification()

    def edit_tags_dialog(self, item: QListWidgetItem) -> None:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞.
        """
        script = item.data(Qt.UserRole)
        current_tags = ", ".join(script.get('tags', []))
        new_tags, ok = QInputDialog.getText(
            self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", text=current_tags
        )
        if ok:
            tags_list = [t.strip().lower() for t in new_tags.split(',') if t.strip()]
            unique_tags = list(dict.fromkeys(tags_list))
            try:
                self.manager.update_tags(script['full_name'], unique_tags)
                self.load_scripts()
                Notification(
                    "‚úÖ –¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    "–¢–µ–≥–∏ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                    "success",
                    duration=3000,
                    parent=self.window()
                ).show_notification()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤: {e}")
                Notification(
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥–∏: {e}",
                    "error",
                    duration=3000,
                    parent=self.window()
                ).show_notification()

    def manage_tags_dialog(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º –æ–∫–Ω–µ.
        """
        all_tags = set()
        try:
            for script in self.manager.get_scripts():
                all_tags.update(script.get('tags', []))
            tags_str = ", ".join(sorted(all_tags))
            QMessageBox.information(self, "–í—Å–µ —Ç–µ–≥–∏", f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏:\n{tags_str}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤: {e}")
            Notification(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏: {e}",
                "error",
                duration=3000,
                parent=self.window()
            ).show_notification()

    def execute_script(self, item: QListWidgetItem) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
        """
        script = item.data(Qt.UserRole)
        file_to_execute = script.get('path', script.get('full_name'))
        try:
            self.manager.execute_script(file_to_execute)
            self.script_executed.emit(script['name'], "success")
            Notification(
                "‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω",
                f"–°–∫—Ä–∏–ø—Ç '{script['name']}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.",
                "success",
                duration=3000,
                parent=self.window()
            ).show_notification()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ '{script['name']}': {e}")
            self.script_executed.emit(script['name'], f"error: {e}")
            Notification(
                "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å '{script['name']}': {e}",
                "error",
                duration=3000,
                parent=self.window()
            ).show_notification()

    def edit_script_dialog(self, item: QListWidgetItem) -> None:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        script = item.data(Qt.UserRole)
        file_to_edit = script.get('path', script.get('full_name'))
        url = QUrl.fromLocalFile(file_to_edit)
        if not QDesktopServices.openUrl(url):
            Notification(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∫—Ä–∏–ø—Ç–∞",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–∫—Ä–∏–ø—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.",
                "error",
                duration=3000,
                parent=self.window()
            ).show_notification()

