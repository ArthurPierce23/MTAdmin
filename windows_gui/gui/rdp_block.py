import logging
import subprocess
from typing import Any, Callable, Dict, List

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QCheckBox, QLabel, QLineEdit,
    QPushButton, QListWidget, QGroupBox, QMessageBox, QListWidgetItem,
    QMenu, QProgressBar, QFrame, QSizePolicy, QSpacerItem
)
from PySide6.QtCore import Qt, QTimer, QThreadPool, QRunnable, Signal, QObject
from PySide6.QtGui import QIntValidator, QFont

from windows_gui.rdp_management import RDPManagerSync  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π RDPManagerSync —Å pypsexec
from notifications import Notification

logger = logging.getLogger(__name__)


class BlockSignals:
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —É –≤–∏–¥–∂–µ—Ç–æ–≤.
    –ü—Ä–∏ –≤—Ö–æ–¥–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã, –∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ ‚Äì –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Ö –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """

    def __init__(self, widgets: List[QObject]) -> None:
        self.widgets = widgets

    def __enter__(self) -> None:
        for w in self.widgets:
            w.blockSignals(True)

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        for w in self.widgets:
            w.blockSignals(False)


class RDPWorker(QRunnable, QObject):
    """
    –ü–æ—Ç–æ–∫–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RDP-–∫–æ–º–∞–Ω–¥ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è UI.

    –í—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã.
    """
    finished = Signal(dict)  # –°–∏–≥–Ω–∞–ª, –ø–µ—Ä–µ–¥–∞—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–ª–æ–≤–∞—Ä—å)
    error = Signal(str)  # –°–∏–≥–Ω–∞–ª, –ø–µ—Ä–µ–¥–∞—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

    def __init__(self, func: Callable[..., Dict[str, Any]], **kwargs: Any) -> None:
        QRunnable.__init__(self)
        QObject.__init__(self)
        self.func = func
        self.kwargs = kwargs

    def run(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ—Å—ã–ª–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª finished.
        –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª error.
        """
        try:
            logger.debug(f"–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: {self.func.__name__} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {self.kwargs}")
            result = self.func(**self.kwargs)
            logger.debug(f"–ü–æ—Ç–æ–∫ –¥–ª—è {self.func.__name__} –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            self.finished.emit(result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {self.func.__name__}: {e}")
            self.error.emit(str(e))


class RDPBlock(QWidget):
    """
    –í–∏–¥–∂–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RDP –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º –ü–ö.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å RDP, –º–µ–Ω—è—Ç—å –ø–æ—Ä—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    """

    def __init__(self, hostname: str, parent: QWidget = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RDP.

        :param hostname: –ò–º—è —Ö–æ—Å—Ç–∞ (–∏–ª–∏ IP), –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø.
        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç.
        """
        super().__init__(parent)
        self.hostname: str = hostname
        self.manager = RDPManagerSync(hostname)
        self.threadpool = QThreadPool.globalInstance()

        # –§–ª–∞–≥–∏ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_refresh: bool = False
        self.refresh_scheduled: bool = False

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RDPBlock –¥–ª—è {hostname}")
        self._init_ui()
        self._init_connections()
        self._load_initial_data()

    def _init_ui(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RDP."""
        self.group_box = QGroupBox("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RDP", self)
        self.group_box.setObjectName("groupBox")  # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑ styles.py

        main_layout = QVBoxLayout(self.group_box)
        main_layout.setContentsMargins(12, 12, 12, 12)
        main_layout.setSpacing(10)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.progress = QProgressBar(self)
        self.progress.setVisible(False)
        self.progress.setTextVisible(False)
        self.progress.setFixedHeight(20)
        main_layout.addWidget(self.progress)

        # –ß–µ–∫–±–æ–∫—Å "–í–∫–ª—é—á–∏—Ç—å RDP"
        self.checkbox_rdp = QCheckBox("‚úÖ –í–∫–ª—é—á–∏—Ç—å RDP", self)
        self.checkbox_rdp.setToolTip("–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π RDP")
        self.checkbox_rdp.setCursor(Qt.PointingHandCursor)
        main_layout.addWidget(self.checkbox_rdp)

        # –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –ø–æ—Ä—Ç–∞
        port_layout = QHBoxLayout()
        port_layout.setSpacing(5)
        port_label = QLabel("üîå –ü–æ—Ä—Ç:", self)
        port_layout.addWidget(port_label)
        self.port_input = QLineEdit(self)
        self.port_input.setValidator(QIntValidator(1, 65535, self))
        self.port_input.setFixedWidth(80)
        self.port_input.setPlaceholderText("–ü–æ—Ä—Ç")
        port_layout.addWidget(self.port_input)
        self.change_port_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å", self)
        self.change_port_btn.setCursor(Qt.PointingHandCursor)
        self.change_port_btn.setToolTip("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç RDP")
        port_layout.addWidget(self.change_port_btn)
        port_layout.addStretch()  # Spacer –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        main_layout.addLayout(port_layout)

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_label = QLabel("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ RDP:", self)
        main_layout.addWidget(users_label)
        self.users_list = QListWidget(self)
        self.users_list.setContextMenuPolicy(Qt.CustomContextMenu)
        self.users_list.setMinimumHeight(100)
        main_layout.addWidget(self.users_list)

        # –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_layout = QHBoxLayout()
        user_layout.setSpacing(5)
        self.user_input = QLineEdit(self)
        self.user_input.setPlaceholderText("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        user_layout.addWidget(self.user_input)
        self.add_user_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å", self)
        self.add_user_btn.setCursor(Qt.PointingHandCursor)
        self.add_user_btn.setToolTip("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ RDP")
        user_layout.addWidget(self.add_user_btn)
        main_layout.addLayout(user_layout)

        # –ë–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ "–û–±–Ω–æ–≤–∏—Ç—å" –∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
        button_layout = QHBoxLayout()
        button_layout.setSpacing(10)
        self.refresh_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å", self)
        self.refresh_btn.setCursor(Qt.PointingHandCursor)
        self.refresh_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ RDP")
        self.apply_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", self)
        self.apply_btn.setCursor(Qt.PointingHandCursor)
        self.apply_btn.setToolTip("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ RDP")
        button_layout.addStretch()
        button_layout.addWidget(self.refresh_btn)
        button_layout.addWidget(self.apply_btn)
        button_layout.addStretch()
        main_layout.addLayout(button_layout)

        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_label = QLabel("", self)
        self.status_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(self.status_label)

        self.group_box.setLayout(main_layout)

        # –û—Å–Ω–æ–≤–Ω–æ–π Layout –≤–∏–¥–∂–µ—Ç–∞
        layout = QVBoxLayout(self)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(10)
        layout.addWidget(self.group_box)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–¥ GroupBox
        self.separator = QFrame(self)
        self.separator.setObjectName("separator")  # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑ styles.py
        self.separator.setFrameShape(QFrame.HLine)
        self.separator.setFrameShadow(QFrame.Sunken)
        layout.addWidget(self.separator)

        self.setLayout(layout)

    def _init_connections(self) -> None:
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Å–æ–±—ã—Ç–∏–π."""
        self.checkbox_rdp.toggled.connect(self._toggle_rdp)
        self.change_port_btn.clicked.connect(self._change_port)
        self.add_user_btn.clicked.connect(self._add_user)
        self.refresh_btn.clicked.connect(self._load_initial_data)
        self.apply_btn.clicked.connect(self._apply_changes)
        self.users_list.customContextMenuRequested.connect(self._show_context_menu)

    def _load_initial_data(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ RDP –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        logger.info(f"–°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö RDP –¥–ª—è {self.hostname}")
        self._execute_operation(self.manager.refresh)

    def _execute_operation(self, func: Callable[..., Dict[str, Any]], **kwargs: Any) -> RDPWorker:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç worker –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.

        :param func: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ñ–æ–Ω–µ.
        :param kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏.
        :return: –û–±—ä–µ–∫—Ç worker.
        """
        logger.debug(f"–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ {func.__name__} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {kwargs}")
        self._show_loading(True)

        worker = RDPWorker(func, **kwargs)
        worker.finished.connect(self._update_ui)
        worker.error.connect(self._handle_error)
        # –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        worker.finished.connect(lambda _: self._show_loading(False))
        worker.error.connect(lambda _: self._show_loading(False))
        self.threadpool.start(worker)
        return worker

    def _show_notification(self, message: str, notif_type: str = "success", duration: int = 3000,
                           manual: bool = True) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

        –ï—Å–ª–∏ manual=False, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –∞ –Ω–µ –∫–∞–∫ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ.
        """
        if not manual:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è (status_label) –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.status_label.setText(message)
            # –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ duration –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
            QTimer.singleShot(duration, lambda: self.status_label.setText(""))
        else:
            notif = Notification(message, notif_type, duration, parent=self.window())
            notif.show_notification()

    def _auto_refresh(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö RDP."""
        self.auto_refresh = True
        self.refresh_scheduled = False
        self._execute_operation(self.manager.refresh)

    def _toggle_rdp(self, checked: bool) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ RDP.
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

        :param checked: True, –µ—Å–ª–∏ RDP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á—ë–Ω.
        """
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å RDP?",
            QMessageBox.Yes | QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            worker = self._execute_operation(self.manager.update_settings, enabled=checked)
            if not self.refresh_scheduled:
                self.refresh_scheduled = True
                worker.finished.connect(lambda _: QTimer.singleShot(1000, self._auto_refresh))
            Notification(
                "‚úÖ –°—Ç–∞—Ç—É—Å RDP –∏–∑–º–µ–Ω—ë–Ω",
                "–°—Ç–∞—Ç—É—Å RDP —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.",
                "success",
                duration=3000,
                parent=self.window()
            ).show_notification()
        else:
            with BlockSignals([self.checkbox_rdp]):
                self.checkbox_rdp.setChecked(not checked)
            Notification(
                "‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                "warning",
                duration=3000,
                parent=self.window()
            ).show_notification()

    def _change_port(self) -> None:
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—Ç RDP –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞."""
        port_str = self.port_input.text()
        if port_str.isdigit() and 1 <= int(port_str) <= 65535:
            self._execute_operation(self.manager.update_settings, port=int(port_str))
            Notification(
                "‚úÖ –ü–æ—Ä—Ç –∏–∑–º–µ–Ω—ë–Ω",
                "–ü–æ—Ä—Ç RDP —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.",
                "success",
                duration=3000,
                parent=self.window()
            ).show_notification()
        else:
            Notification(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –æ—Ç 1 –¥–æ 65535.",
                "error",
                duration=3000,
                parent=self.window()
            ).show_notification()

    def _validate_user(self, user: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:
        net user "<user>" /domain.

        :param user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        command = f'net user "{user}" /domain'
        result = subprocess.run(
            command, capture_output=True, text=True, shell=True, encoding='cp866'
        )
        logger.debug(f"_validate_user: –ö–æ–º–∞–Ω–¥–∞ = {command}")
        logger.debug(f"_validate_user: stdout = {repr(result.stdout)}")
        logger.debug(f"_validate_user: stderr = {repr(result.stderr)}")

        if "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in result.stderr or "NET HELPMSG 2221" in result.stderr:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–º–µ–Ω–µ!")
            return False

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–º–µ–Ω–µ.")
        return True

    def _add_user(self) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É RDP –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        user = self.user_input.text().strip()
        if not user:
            Notification(
                "‚ùå –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                "error",
                duration=3000,
                parent=self.window()
            ).show_notification()
            return

        if not self._validate_user(user):
            Notification(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–º–µ–Ω–µ!",
                "error",
                duration=3000,
                parent=self.window()
            ).show_notification()
            return

        current_users = [
            self.users_list.item(i).text().lower().replace("ncc\\", "")
            for i in range(self.users_list.count())
        ]
        if user.lower() in current_users:
            Notification(
                "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ.",
                "warning",
                duration=3000,
                parent=self.window()
            ).show_notification()
            return

        self._execute_operation(self.manager.add_user, username=user)
        self.user_input.clear()
        Notification(
            "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω",
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            "success",
            duration=3000,
            parent=self.window()
        ).show_notification()
        QTimer.singleShot(1000, self._load_initial_data)

    def _apply_changes(self) -> None:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ RDP (—á–µ–∫–±–æ–∫—Å, –ø–æ—Ä—Ç –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
        """
        current_users = [self.users_list.item(i).text() for i in range(self.users_list.count())]
        port = self.port_input.text()

        def on_update_complete(_: dict) -> None:
            if not self.refresh_scheduled:
                self.refresh_scheduled = True
                QTimer.singleShot(1000, self._auto_refresh)
            Notification(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ RDP —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                "success",
                duration=3000,
                parent=self.window()
            ).show_notification()

        worker = self._execute_operation(
            self.manager.update_settings,
            enabled=self.checkbox_rdp.isChecked(),
            port=int(port) if port else None,
            users=current_users
        )
        worker.finished.connect(on_update_complete)

    def _show_context_menu(self, pos) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        menu = QMenu()
        delete_action = menu.addAction("–£–¥–∞–ª–∏—Ç—å")
        delete_action.triggered.connect(self._delete_selected_user)
        menu.exec_(self.users_list.mapToGlobal(pos))

    def _delete_selected_user(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        item = self.users_list.currentItem()
        if not item:
            Notification(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                "error",
                duration=3000,
                parent=self.window()
            ).show_notification()
            return

        current_users = [self.users_list.item(i).text() for i in range(self.users_list.count())]
        current_users.remove(item.text())
        logger.debug(f"–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {item.text()} –∏–∑ RDP")

        def on_update_complete(_: dict) -> None:
            if not self.refresh_scheduled:
                self.refresh_scheduled = True
                QTimer.singleShot(100, self._auto_refresh)
            Notification(
                "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
                "success",
                duration=3000,
                parent=self.window()
            ).show_notification()

        worker = self._execute_operation(self.manager.update_settings, users=current_users)
        worker.finished.connect(on_update_complete)

    def _update_ui(self, data: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        self._show_loading(False)

        with BlockSignals([self.checkbox_rdp, self.port_input, self.users_list]):
            self.checkbox_rdp.setChecked(data.get('enabled', False))
            self.port_input.setText(str(data.get('port', 3389)))
            self.users_list.clear()
            for user in data.get('users', []):
                item = QListWidgetItem(user)
                font = QFont("Arial", 10)
                font.setBold(False)
                item.setFont(font)
                item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                self.users_list.addItem(item)

        self.status_label.setText("")

        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∞–≤—Ç–æ (—Ç.–µ. –≤—ã–∑–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        if not self.auto_refresh:
            Notification(
                "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
                "success",
                duration=3000,
                parent=self.window()
            ).show_notification()
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ status_label.
        else:
            self.info_label.setText("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        self.auto_refresh = False
        self.refresh_scheduled = False

    def _show_loading(self, visible: bool) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

        :param visible: True ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, False ‚Äì —Å–∫—Ä—ã–≤–∞—Ç—å.
        """
        self.progress.setVisible(visible)
        # –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–Ω ‚Äì –∑–∞–¥–∞—ë–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º
        self.progress.setRange(0, 0 if visible else 1)
        for widget in [self.checkbox_rdp, self.change_port_btn, self.add_user_btn,
                       self.refresh_btn, self.apply_btn]:
            widget.setEnabled(not visible)

    def _handle_error(self, message: str) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, —Å–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

        –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω–µ–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏.
        """
        logger.error(f"–û—à–∏–±–∫–∞: {message}")
        self._show_loading(False)

        error_mapping = {
            "ERROR_ACCESS_DENIED": (
                "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UAC –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π."
            ),
            "unsupported operand type(s) for +=: 'NoneType' and 'bytes'": (
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª—É–∂–±—ã.\n–í–æ–∑–º–æ–∂–Ω–æ, —Å–ª—É–∂–±–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –ø—Ä–∞–≤.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É pypsexec."
            )
        }

        friendly_message = next((msg for key, msg in error_mapping.items() if key in message), message)
        self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞: {friendly_message}")

        # –í–º–µ—Å—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ status_label:
        Notification(
            "‚ùå –û—à–∏–±–∫–∞",
            friendly_message,
            "error",
            duration=3000,
            parent=self.window()
        ).show_notification()

        # –ï—Å–ª–∏ –≤—Å—ë –∂–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        # msg_box = QMessageBox(self)
        # msg_box.setIcon(QMessageBox.Critical)
        # msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
        # msg_box.setText("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        # msg_box.setInformativeText(friendly_message)
        # msg_box.exec_()

