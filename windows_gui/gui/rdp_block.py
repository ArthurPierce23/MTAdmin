import logging
import subprocess
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QCheckBox, QLabel, QLineEdit,
    QPushButton, QListWidget, QGroupBox, QMessageBox, QListWidgetItem,
    QMenu, QProgressBar, QFrame
)
from PySide6.QtCore import Qt, QTimer, QThreadPool, QRunnable, Signal, QObject
from PySide6.QtGui import QIntValidator, QFont
from windows_gui.rdp_management import RDPManagerSync  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π RDPManagerSync —Å pypsexec
from notifications import Notification  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

logger = logging.getLogger(__name__)


# =============================================================================
# –ö–ª–∞—Å—Å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —É –≤–∏–¥–∂–µ—Ç–æ–≤
# =============================================================================
class BlockSignals:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —É –≤–∏–¥–∂–µ—Ç–æ–≤."""
    def __init__(self, widgets):
        self.widgets = widgets

    def __enter__(self):
        for w in self.widgets:
            w.blockSignals(True)

    def __exit__(self, exc_type, exc_val, exc_tb):
        for w in self.widgets:
            w.blockSignals(False)


# =============================================================================
# –ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π RDP (–±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è UI)
# =============================================================================
class RDPWorker(QRunnable, QObject):
    """–ü–æ—Ç–æ–∫–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RDP-–∫–æ–º–∞–Ω–¥ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è UI."""
    finished = Signal(dict)  # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ UI
    error = Signal(str)      # –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

    def __init__(self, func, **kwargs):
        super().__init__()
        QObject.__init__(self)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º QObject
        self.func = func
        self.kwargs = kwargs

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ UI."""
        try:
            logger.debug(f"–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è: {self.func.__name__}")
            result = self.func(**self.kwargs)
            logger.debug(f"–ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω: {result}")
            self.finished.emit(result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {self.func.__name__}: {e}")
            self.error.emit(str(e))


# =============================================================================
# –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RDP
# =============================================================================
class RDPBlock(QWidget):
    def __init__(self, hostname: str, parent: QWidget = None):
        super().__init__(parent)
        self.hostname = hostname
        self.manager = RDPManagerSync(hostname)
        self.threadpool = QThreadPool.globalInstance()

        # –§–ª–∞–≥–∏ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_refresh = False
        self.refresh_scheduled = False

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RDPBlock –¥–ª—è {hostname}")
        self._init_ui()
        self._init_connections()
        self._load_initial_data()

    def _init_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RDP."""
        self.group_box = QGroupBox("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RDP")
        self.group_box.setObjectName("groupBox")  # üéØ –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑ styles.py

        main_layout = QVBoxLayout(self.group_box)
        main_layout.setContentsMargins(12, 12, 12, 12)
        main_layout.setSpacing(10)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.progress = QProgressBar()
        self.progress.setVisible(False)
        main_layout.addWidget(self.progress)

        # –ß–µ–∫–±–æ–∫—Å "–í–∫–ª—é—á–∏—Ç—å RDP"
        self.checkbox_rdp = QCheckBox("‚úÖ –í–∫–ª—é—á–∏—Ç—å RDP")
        main_layout.addWidget(self.checkbox_rdp)

        # –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –ø–æ—Ä—Ç–∞
        port_layout = QHBoxLayout()
        port_layout.setSpacing(5)
        port_label = QLabel("üîå –ü–æ—Ä—Ç:")
        port_layout.addWidget(port_label)
        self.port_input = QLineEdit()
        self.port_input.setValidator(QIntValidator(1, 65535))
        self.port_input.setFixedWidth(80)
        port_layout.addWidget(self.port_input)
        self.change_port_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        port_layout.addWidget(self.change_port_btn)
        main_layout.addLayout(port_layout)

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_label = QLabel("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ RDP:")
        main_layout.addWidget(users_label)
        self.users_list = QListWidget()
        self.users_list.setContextMenuPolicy(Qt.CustomContextMenu)
        main_layout.addWidget(self.users_list)

        # –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_layout = QHBoxLayout()
        user_layout.setSpacing(5)
        self.user_input = QLineEdit()
        user_layout.addWidget(self.user_input)
        self.add_user_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        user_layout.addWidget(self.add_user_btn)
        main_layout.addLayout(user_layout)

        # –ë–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ "–û–±–Ω–æ–≤–∏—Ç—å" –∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
        button_layout = QHBoxLayout()
        button_layout.setSpacing(10)
        self.refresh_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        self.apply_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        button_layout.addWidget(self.refresh_btn)
        button_layout.addWidget(self.apply_btn)
        main_layout.addLayout(button_layout)

        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_label = QLabel()
        self.status_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(self.status_label)

        self.group_box.setLayout(main_layout)

        # –û—Å–Ω–æ–≤–Ω–æ–π Layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(10)
        layout.addWidget(self.group_box)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–¥ GroupBox
        self.separator = QFrame()
        self.separator.setObjectName("separator")  # üéØ –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑ styles.py
        self.separator.setFrameShape(QFrame.HLine)
        self.separator.setFrameShadow(QFrame.Sunken)
        layout.addWidget(self.separator)

        self.setLayout(layout)


    def _init_connections(self):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Å–æ–±—ã—Ç–∏–π."""
        self.checkbox_rdp.toggled.connect(self._toggle_rdp)
        self.change_port_btn.clicked.connect(self._change_port)
        self.add_user_btn.clicked.connect(self._add_user)
        self.refresh_btn.clicked.connect(self._load_initial_data)
        self.apply_btn.clicked.connect(self._apply_changes)
        self.users_list.customContextMenuRequested.connect(self._show_context_menu)

    def _load_initial_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ RDP –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        logger.info(f"–°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö RDP –¥–ª—è {self.hostname}")
        self._execute_operation(self.manager.refresh)

    def _execute_operation(self, func, **kwargs) -> RDPWorker:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç worker –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ü–µ–ø–æ—á–∫–∏.
        """
        logger.debug(f"–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ {func.__name__}")
        self._show_loading(True)

        worker = RDPWorker(func, **kwargs)
        worker.finished.connect(self._update_ui)
        worker.error.connect(self._handle_error)
        worker.finished.connect(lambda _: self._show_loading(False))
        worker.error.connect(lambda _: self._show_loading(False))
        self.threadpool.start(worker)
        return worker

    def _show_notification(self, message: str, notif_type: str = "success", duration: int = 3000):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å notifications."""
        notif = Notification(message, notif_type, duration, parent=self)
        notif.show_notification()

    def _auto_refresh(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
        self.auto_refresh = True
        self.refresh_scheduled = False
        self._execute_operation(self.manager.refresh)

    def _toggle_rdp(self, checked: bool):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ RDP.
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        """
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å RDP?",
            QMessageBox.Yes | QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            worker = self._execute_operation(
                self.manager.update_settings,
                enabled=checked
            )
            if not self.refresh_scheduled:
                self.refresh_scheduled = True
                worker.finished.connect(lambda _: QTimer.singleShot(1000, self._auto_refresh))
            self._show_notification("–°—Ç–∞—Ç—É—Å RDP –∏–∑–º–µ–Ω—ë–Ω", "success")
        else:
            with BlockSignals([self.checkbox_rdp]):
                self.checkbox_rdp.setChecked(not checked)
            self._show_notification("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", "warning")

    def _change_port(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—Ç RDP –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞."""
        port = self.port_input.text()
        if port.isdigit() and 1 <= int(port) <= 65535:
            self._execute_operation(self.manager.update_settings, port=int(port))
            self._show_notification("–ü–æ—Ä—Ç –∏–∑–º–µ–Ω—ë–Ω", "success")
        else:
            self._show_notification("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç", "error")

    def _validate_user(self, user: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é `net user "<user>" /domain`.
        –ï—Å–ª–∏ –≤ stderr —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        command = f'net user "{user}" /domain'
        result = subprocess.run(command, capture_output=True, text=True, shell=True, encoding='cp866')

        logger.debug(f"_validate_user: –ö–æ–º–∞–Ω–¥–∞ = {command}")
        logger.debug(f"_validate_user: stdout = {repr(result.stdout)}")
        logger.debug(f"_validate_user: stderr = {repr(result.stderr)}")

        if "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in result.stderr or "NET HELPMSG 2221" in result.stderr:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–º–µ–Ω–µ!")
            return False

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–º–µ–Ω–µ.")
        return True

    def _add_user(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É RDP –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        user = self.user_input.text().strip()
        if not user:
            self._show_notification("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "error")
            return

        if not self._validate_user(user):
            self._show_notification("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–º–µ–Ω–µ!", "error")
            return

        current_users = [self.users_list.item(i).text().lower().replace("ncc\\", "") for i in range(self.users_list.count())]

        if user.lower() in current_users:
            self._show_notification("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!", "warning")
            return

        self._execute_operation(self.manager.add_user, username=user)
        self.user_input.clear()
        self._show_notification(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –¥–æ–±–∞–≤–ª–µ–Ω!", "success")
        QTimer.singleShot(1000, self._load_initial_data)

    def _apply_changes(self):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ RDP (—á–µ–∫–±–æ–∫—Å, –ø–æ—Ä—Ç –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
        """
        current_users = [self.users_list.item(i).text() for i in range(self.users_list.count())]
        port = self.port_input.text()

        def on_update_complete(_):
            if not self.refresh_scheduled:
                self.refresh_scheduled = True
                QTimer.singleShot(1000, self._auto_refresh)
            self._show_notification("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", "success")

        self._execute_operation(
            self.manager.update_settings,
            enabled=self.checkbox_rdp.isChecked(),
            port=int(port) if port else None,
            users=current_users
        ).finished.connect(on_update_complete)

    def _show_context_menu(self, pos):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        menu = QMenu()
        delete_action = menu.addAction("–£–¥–∞–ª–∏—Ç—å")
        delete_action.triggered.connect(self._delete_selected_user)
        menu.exec_(self.users_list.mapToGlobal(pos))

    def _delete_selected_user(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        item = self.users_list.currentItem()
        if not item:
            self._show_notification("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω", "error")
            return

        current_users = [self.users_list.item(i).text() for i in range(self.users_list.count())]
        current_users.remove(item.text())
        logger.debug(f"–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {item.text()} –∏–∑ RDP")

        def on_update_complete(_):
            if not self.refresh_scheduled:
                self.refresh_scheduled = True
                QTimer.singleShot(100, self._auto_refresh)
            self._show_notification("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω", "success")

        worker = self._execute_operation(self.manager.update_settings, users=current_users)
        worker.finished.connect(on_update_complete)

    def _update_ui(self, data: dict):
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        self._show_loading(False)

        with BlockSignals([self.checkbox_rdp, self.port_input, self.users_list]):
            self.checkbox_rdp.setChecked(data.get('enabled', False))
            self.port_input.setText(str(data.get('port', 3389)))
            self.users_list.clear()
            for user in data.get('users', []):
                item = QListWidgetItem(user)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π (–Ω–µ –∂–∏—Ä–Ω—ã–π) —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                font = QFont("Arial", 10)
                font.setBold(False)
                item.setFont(font)
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                self.users_list.addItem(item)

        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞ "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        self.status_label.setText("")

        if not self.auto_refresh:
            self._show_notification("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "success")
        self.auto_refresh = False
        self.refresh_scheduled = False



    def _show_loading(self, visible: bool):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        self.progress.setVisible(visible)
        self.progress.setRange(0, 0 if visible else 1)
        for widget in [self.checkbox_rdp, self.change_port_btn, self.add_user_btn, self.refresh_btn, self.apply_btn]:
            widget.setEnabled(not visible)

    def _handle_error(self, message: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, —Å–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        logger.error(f"–û—à–∏–±–∫–∞: {message}")
        self._show_loading(False)

        error_mapping = {
            "ERROR_ACCESS_DENIED": (
                "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UAC –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π."
            ),
            "unsupported operand type(s) for +=: 'NoneType' and 'bytes'": (
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª—É–∂–±—ã.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Å–ª—É–∂–±–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –ø—Ä–∞–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å "
                "—É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É pypsexec."
            )
        }

        friendly_message = None
        for key, user_message in error_mapping.items():
            if key in message:
                friendly_message = user_message
                break
        if not friendly_message:
            friendly_message = message

        self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞: {friendly_message}")

        msg_box = QMessageBox(self)
        base_font = QFont("Arial", 10)
        msg_box.setFont(base_font)
        msg_box.setIcon(QMessageBox.Critical)
        msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
        msg_box.setText("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        msg_box.setInformativeText(friendly_message)
        msg_box.exec_()

        self._show_notification(friendly_message, "error")
