from pypsexec.client import Client
import threading
import logging

logger = logging.getLogger(__name__)

class RDPManagerSync:
    def __init__(self, hostname: str):
        self.hostname = hostname
        self.lock = threading.Lock()
        self.refresh_lock = threading.Lock()  # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–∫ –¥–ª—è refresh()

    def run_remote_command(self, command: str) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º –ü–ö —á–µ—Ä–µ–∑ PsExec –∏ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–π."""
        print(f"üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ {self.hostname}: {command}")

        client = None
        try:
            client = Client(self.hostname, encrypt=False)
            client.connect()
            client.create_service()

            stdout, stderr, exit_code = client.run_executable("cmd.exe", arguments=f'/c {command}')

            return stdout.decode("cp866").strip() if exit_code == 0 else f"–û—à–∏–±–∫–∞: {stderr.decode('cp866').strip()}"

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return f"–û—à–∏–±–∫–∞: {e}"

        finally:
            if client:
                client.remove_service()
                client.disconnect()
                print(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.hostname} –∑–∞–∫—Ä—ã—Ç–æ")

    def refresh(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RDP, –∑–∞—â–∏—â–∞—è –≤—ã–∑–æ–≤ –ª–æ–∫–æ–º."""
        print(f"üîÑ refresh() –≤—ã–∑–≤–∞–Ω –¥–ª—è {self.hostname}")

        try:
            with self.refresh_lock:
                status = {
                    "enabled": self._get_rdp_status(),
                    "port": self._get_rdp_port(),
                    "users": self._get_rdp_users(),
                }

            print(f"‚úÖ refresh() –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {self.hostname}: {status}")
            return status

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ refresh() –¥–ª—è {self.hostname}: {e}")
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö RDP")
            raise e

    def update_settings(self, enabled=None, port=None, users=None) -> dict:
        """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RDP."""
        try:
            with self.lock:
                if enabled is not None:
                    self._set_rdp_status(enabled)
                if port is not None:
                    self._set_rdp_port(port)
                if users is not None:
                    self._set_rdp_users(users)

                return self.refresh()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ RDP")
            raise e

    def _get_rdp_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ RDP, –ø–∞—Ä—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–≤–æ–≥–æ –∫–ª—é—á–∞."""
        output = self.run_remote_command(
            'reg query "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server" /v fDenyTSConnections'
        )
        print(f"–í—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ RDP: {output}")
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –∫–ª—é—á–∞
        for line in output.splitlines():
            if "fDenyTSConnections" in line:
                # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç:
                # fDenyTSConnections    REG_DWORD    0x0  –∏–ª–∏  0x1
                tokens = line.split()
                if len(tokens) >= 3:
                    value = tokens[-1].lower()
                    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0x0, –∑–Ω–∞—á–∏—Ç RDP –≤–∫–ª—é—á—ë–Ω
                    return value == "0x0"
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ RDP –≤—ã–∫–ª—é—á–µ–Ω
        return False

    def _get_rdp_port(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç RDP."""
        output = self.run_remote_command(
            'reg query "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp" /v PortNumber'
        )
        for line in output.splitlines():
            if "PortNumber" in line:
                return int(line.split()[-1], 16)  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤ hex
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç RDP")

    def _get_rdp_users(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π RDP, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç."""
        possible_group_names = ["Remote Desktop Users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"]

        for group_name in possible_group_names:
            output = self.run_remote_command(f'net localgroup "{group_name}"')
            users = []
            is_users_section = False
            for line in output.splitlines():
                line = line.strip()

                # –ù–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if "-----" in line:
                    is_users_section = not is_users_section
                    continue

                # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if is_users_section and line and "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ." not in line:
                    users.append(line)

            if users:
                self.rdp_group_name = group_name
                return users

        raise Exception("–ì—Ä—É–ø–ø–∞ RDP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã.")

    def add_user(self, username: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É RDP –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö."""
        if not hasattr(self, "rdp_group_name"):
            self._get_rdp_users()  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã

        command = f'net localgroup "{self.rdp_group_name}" "{username}" /add'
        result = self.run_remote_command(command)

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {result}")
        return result

    def _set_rdp_status(self, enable: bool):
        """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç RDP –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–±—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        # fDenyTSConnections = 0 -> RDP –≤–∫–ª—é—á—ë–Ω, 1 -> RDP –≤—ã–∫–ª—é—á–µ–Ω
        value = "0" if enable else "1"
        cmd = f'reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d {value} /f'
        result = self.run_remote_command(cmd)
        print(f"–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ RDP —Å—Ç–∞—Ç—É—Å–∞: {cmd} -> {result}")

        firewall_cmd = "Enable-NetFirewallRule -DisplayName 'Remote Desktop*'" if enable else "Disable-NetFirewallRule -DisplayName 'Remote Desktop*'"
        fw_result = self.run_remote_command(f'powershell -Command "{firewall_cmd}"')
        print(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–µ—Ä–≤–æ–ª–∞: {firewall_cmd} -> {fw_result}")

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        svc_cmd = 'net stop TermService && net start TermService'
        svc_result = self.run_remote_command(svc_cmd)
        print(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã RDP: {svc_cmd} -> {svc_result}")

    def _set_rdp_port(self, port: int):
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—Ç RDP."""
        self.run_remote_command(
            f'reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp" /v PortNumber /t REG_DWORD /d {port} /f'
        )
        self.run_remote_command(
            f'powershell -Command "Set-NetFirewallRule -DisplayName \'Remote Desktop*\' -LocalPort {port}"'
        )

    def _set_rdp_users(self, users: list):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ RDP-–≥—Ä—É–ø–ø—ã —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏."""
        if not hasattr(self, "rdp_group_name"):
            self._get_rdp_users()  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã

        current_users = set(self._get_rdp_users())
        new_users = set(users)

        for user in new_users - current_users:
            self.run_remote_command(f'net localgroup "{self.rdp_group_name}" {user} /add')

        for user in current_users - new_users:
            self.run_remote_command(f'net localgroup "{self.rdp_group_name}" {user} /delete')
